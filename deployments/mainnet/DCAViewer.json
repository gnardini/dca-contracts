{
  "address": "0xdeFFB51f2d1D166d2d9bd81f80eF01f0e378191C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract DCA",
          "name": "dca",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfSwaps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastPeriodWithdrawal",
              "type": "uint256"
            }
          ],
          "internalType": "struct DCA.UserOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "calculateAmountWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "emergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract DCA",
          "name": "dca",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfSwaps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastPeriodWithdrawal",
              "type": "uint256"
            }
          ],
          "internalType": "struct DCA.UserOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract DCA",
          "name": "dca",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "getSwapStateAmountToReduce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract DCA",
          "name": "dca",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "getSwapStateExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract DCA",
          "name": "dca",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserOrdersWithExtras",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfSwaps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastPeriodWithdrawal",
              "type": "uint256"
            }
          ],
          "internalType": "struct DCA.UserOrder[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa09051d15644453e0779ee207b82e7f4f1e8d92e3717cb62a63ff89a971ebf45",
  "receipt": {
    "to": null,
    "from": "0xe59f139acBAB76d41623870F89f107d26Cf1E2B8",
    "contractAddress": "0xdeFFB51f2d1D166d2d9bd81f80eF01f0e378191C",
    "transactionIndex": 8,
    "gasUsed": "1148855",
    "logsBloom": "0x
    "blockHash": "0x7f8585cc27e926b8bcd7d5ebc9705050d3413efd63725d57b4cd928e0a2e998a",
    "transactionHash": "0xa09051d15644453e0779ee207b82e7f4f1e8d92e3717cb62a63ff89a971ebf45",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 13782010,
        "transactionHash": "0xa09051d15644453e0779ee207b82e7f4f1e8d92e3717cb62a63ff89a971ebf45",
        "address": "0xdeFFB51f2d1D166d2d9bd81f80eF01f0e378191C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e59f139acbab76d41623870f89f107d26cf1e2b8"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0x7f8585cc27e926b8bcd7d5ebc9705050d3413efd63725d57b4cd928e0a2e998a"
      }
    ],
    "blockNumber": 13782010,
    "cumulativeGasUsed": "3822302",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ddd10bd5900de300090856df2c2d3880",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract DCA\",\"name\":\"dca\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfSwaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPeriodWithdrawal\",\"type\":\"uint256\"}],\"internalType\":\"struct DCA.UserOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"calculateAmountWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DCA\",\"name\":\"dca\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfSwaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPeriodWithdrawal\",\"type\":\"uint256\"}],\"internalType\":\"struct DCA.UserOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DCA\",\"name\":\"dca\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getSwapStateAmountToReduce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DCA\",\"name\":\"dca\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"getSwapStateExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DCA\",\"name\":\"dca\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserOrdersWithExtras\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfSwaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPeriodWithdrawal\",\"type\":\"uint256\"}],\"internalType\":\"struct DCA.UserOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateAmountWithdrawn(address,(address,address,uint256,uint256,uint256,uint256))\":{\"notice\":\"Calculates hoy much |buyToken| has already been withdrawn for a user order. Takes into account fees taken.\"},\"getUserOrdersWithExtras(address,address)\":{\"notice\":\"Returns the orders for a user with more information that can be shown on a front end. Might not work well if the user has too many orders, it's just for short-term convenience.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DCAViewer.sol\":\"DCAViewer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/DCA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\n/// @title DCA\\n/// This contract allows users to deposit one token and gradually swaps it for another one\\n/// every day at the price it's trading at, allowing user to buy the target token using a\\n/// Dollar-Cost Averaging (DCA) strategy.\\n/// @dev To perform the swaps, we aggregate the tokens for all the users and make one big\\n/// swap instead of many small ones.\\ncontract DCA is Ownable {\\n    /// Number of blocks in a day assuming 5 seconds per block. Works for the Celo blockchain.\\n    uint256 public constant BLOCKS_PER_DAY = 17280;\\n    /// Upper limit of the fee that can be charged on swaps. Has to be divided by\\n    /// |FEE_DENOMINATOR|. Equivalent to 60bps.\\n    uint256 public constant MAX_FEE_NUMERATOR = 6_000;\\n    uint256 public constant FEE_DENOMINATOR = 1_000_000;\\n\\n    event OrderCreated(\\n        address indexed userAddress,\\n        uint256 index,\\n        IERC20 indexed sellToken,\\n        IERC20 indexed buyToken,\\n        uint256 amountPerSwap,\\n        uint256 numberOfSwaps,\\n        uint256 startingPeriod\\n    );\\n    event SwapExecuted(\\n        address indexed sellToken,\\n        address indexed buyToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 indexed period\\n    );\\n    /// Emitted when a user withdraws the funds that were already swapped.\\n    event SwappedWithdrawal(\\n        address indexed userAddress,\\n        uint256 indexed index,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    /// Emitted when a user withdraws their principal early. ie. before it was swapped.\\n    event RemainingWithdrawal(\\n        address indexed userAddress,\\n        uint256 indexed index,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    event TokenPairInitialized(address sellToken, address buyToken);\\n    event EmergencyWithdrawal(address token, uint256 amount, address to);\\n    event OracleUpdaterChanged(address oracleUpdater);\\n    event OracleSet(address oracle);\\n    event BeneficiarySet(address newBeneficiary);\\n    event FeeNumeratorSet(uint256 feeNumerator);\\n\\n    /// Contains information about one specific user order.\\n    /// A period is defined as a block number divided by |BLOCKS_PER_DAY|.\\n    struct UserOrder {\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        uint256 amountPerSwap;\\n        uint256 numberOfSwaps;\\n        uint256 startingPeriod;\\n        uint256 lastPeriodWithdrawal;\\n    }\\n\\n    /// Contains information about the swapping status of a token pair.\\n    struct SwapState {\\n        uint256 amountToSwap;\\n        uint256 lastSwapPeriod;\\n    }\\n\\n    /// For a given (sellToken, buyToken, period) tuple it returns the exchange rate used (if\\n    /// the period is in the past), how many daily swap tokens have their last day on that period\\n    /// and the fee charged in the period if it's in the past.\\n    struct PeriodSwapState {\\n        /// For each past period, what exchange rate was used.\\n        uint256 exchangeRate;\\n        /// For each future period, how much to reduce to |amountToSwap| in its SwapState.\\n        uint256 amountToReduce;\\n        /// For past periods, the fee numerator used on the swap.\\n        uint256 feeNumerator;\\n    }\\n\\n    /// Contains the state of a token pair swaps. For a given (sellToken, buyToken)\\n    /// it contains how much it should swap in the next period and when the last period was.\\n    mapping(address => mapping(address => SwapState)) public swapStates;\\n    /// Contains information related to swaps for a (sellToken, buyToken, period) tuple.\\n    /// See |PeriodSwapState| for more info.\\n    mapping(address => mapping(address => mapping(uint256 => PeriodSwapState)))\\n        public periodsSwapStates;\\n    /// A list of |UserOrder| for each user address.\\n    mapping(address => UserOrder[]) public orders;\\n\\n    /// Active fee on swaps. To be used together with |FEE_DENOMINATOR|.\\n    uint256 public feeNumerator;\\n    /// Where to send the fees.\\n    address public beneficiary;\\n    /// Oracle to use to get the amount to receive on swaps.\\n    Oracle public oracle;\\n    /// If true, the owner can withdraw funds. Should be turned off after there is sufficient confidence\\n    /// in the code, for example after audits.\\n    bool public guardrailsOn;\\n    /// Address that can update the oracle. Matches the owner at first, but should be operated by the\\n    /// community after a while.\\n    address public oracleUpdater;\\n\\n    /// @dev Throws if called by any account other than the oracle updater.\\n    modifier onlyOracleUpdater() {\\n        require(\\n            oracleUpdater == msg.sender,\\n            \\\"DCA: caller is not the oracle updater\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        Oracle _oracle,\\n        address _beneficiary,\\n        uint256 initialFee\\n    ) {\\n        guardrailsOn = true;\\n        oracleUpdater = msg.sender;\\n        setOracle(_oracle);\\n        setBeneficiary(_beneficiary);\\n        setFeeNumerator(initialFee);\\n    }\\n\\n    /// Starts a new DCA position for the |msg.sender|. When creating a new position, we\\n    /// add the |_amountPerSwap| to the |amountToSwap| variable on |SwapState| and to\\n    /// |amountToReduce| on the final period's |PeriodSwapState|. Thus, the amount to swap\\n    /// daily will increase between the current period and the final one.\\n    /// @param _sellToken token to sell on each period.\\n    /// @param _buyToken token to buy on each period.\\n    /// @param _amountPerSwap amount of _sellToken to sell each period.\\n    /// @param _numberOfSwaps number of periods to do the swapping.\\n    function createOrder(\\n        IERC20 _sellToken,\\n        IERC20 _buyToken,\\n        uint256 _amountPerSwap,\\n        uint256 _numberOfSwaps\\n    ) external returns (uint256 index) {\\n        require(\\n            _sellToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _amountPerSwap * _numberOfSwaps\\n            ),\\n            \\\"DCA: Not enough funds\\\"\\n        );\\n\\n        SwapState storage swapState = swapStates[address(_sellToken)][\\n            address(_buyToken)\\n        ];\\n        // If it's the first order for this pair, initialize it.\\n        if (swapState.lastSwapPeriod == 0) {\\n            swapState.lastSwapPeriod = getCurrentPeriod() - 1;\\n            emit TokenPairInitialized(address(_sellToken), address(_buyToken));\\n        }\\n        uint256 startingPeriod = swapState.lastSwapPeriod + 1;\\n        UserOrder memory newOrder = UserOrder(\\n            _sellToken,\\n            _buyToken,\\n            _amountPerSwap,\\n            _numberOfSwaps,\\n            startingPeriod,\\n            swapState.lastSwapPeriod\\n        );\\n\\n        swapState.amountToSwap += _amountPerSwap;\\n        periodsSwapStates[address(_sellToken)][address(_buyToken)][\\n            startingPeriod + _numberOfSwaps - 1\\n        ].amountToReduce += _amountPerSwap;\\n\\n        index = orders[msg.sender].length;\\n        orders[msg.sender].push(newOrder);\\n\\n        emit OrderCreated(\\n            msg.sender,\\n            index,\\n            _sellToken,\\n            _buyToken,\\n            _amountPerSwap,\\n            _numberOfSwaps,\\n            startingPeriod\\n        );\\n    }\\n\\n    /// Executes a swap between two tokens. The period must be the last executed + 1.\\n    /// The swapping is done by the |_swapper|. We calculate the required exchange rate using\\n    /// an oracle, send them the funds to swap and expect them to return the calculated return\\n    /// amount. This allows us to more easily add pairs since we just need the oracle support,\\n    /// not the exact routes to follow. Callers are incentivized to call this function for\\n    /// the arbitrage opportunity.\\n    ///\\n    /// In other words, the general logic followed here is:\\n    /// - Calculate and send the fee to the |beneficiary|.\\n    /// - Calculate the exchange rate using |oracle|.\\n    /// - Send the swap amount to |_swapper| can call its |swap| function.\\n    /// - Check that it returned the required funds taking the exchange rate into account.\\n    /// @param _sellToken token to sell on the swap.\\n    /// @param _buyToken token to buy on the swap.\\n    /// @param _period period to perform the swap for. It has only one possible valid\\n    /// value, so it is not strictly necessary.\\n    /// @param _swapper address that will perform the swap.\\n    /// @param _params params to send to |_swapper| for performing the swap.\\n    function executeOrder(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _period,\\n        address _swapper,\\n        bytes memory _params\\n    ) external {\\n        SwapState storage swapState = swapStates[_sellToken][_buyToken];\\n        require(swapState.lastSwapPeriod + 1 == _period, \\\"DCA: Invalid period\\\");\\n        require(\\n            _period <= getCurrentPeriod(),\\n            \\\"DCA: Period cannot be in the future\\\"\\n        );\\n        uint256 fee = (swapState.amountToSwap * feeNumerator) / FEE_DENOMINATOR;\\n        uint256 swapAmount = swapState.amountToSwap - fee;\\n\\n        uint256 requiredAmount = oracle.consult(\\n            _sellToken,\\n            swapAmount,\\n            _buyToken\\n        );\\n        require(requiredAmount > 0, \\\"DCA: Oracle failure\\\");\\n\\n        PeriodSwapState storage periodSwapState = periodsSwapStates[_sellToken][\\n            _buyToken\\n        ][_period];\\n\\n        swapState.lastSwapPeriod++;\\n        swapState.amountToSwap -= periodSwapState.amountToReduce;\\n        periodSwapState.exchangeRate = (requiredAmount * 1e27) / swapAmount;\\n        periodSwapState.feeNumerator = feeNumerator;\\n\\n        require(\\n            IERC20(_sellToken).transfer(beneficiary, fee),\\n            \\\"DCA: Fee transfer to beneficiary failed\\\"\\n        );\\n\\n        uint256 balanceBefore = IERC20(_buyToken).balanceOf(address(this));\\n        require(\\n            IERC20(_sellToken).transfer(_swapper, swapAmount),\\n            \\\"DCA: Transfer to Swapper failed\\\"\\n        );\\n        ISwapper(_swapper).swap(\\n            _sellToken,\\n            _buyToken,\\n            swapAmount,\\n            requiredAmount,\\n            _params\\n        );\\n        require(\\n            balanceBefore + requiredAmount <=\\n                IERC20(_buyToken).balanceOf(address(this)),\\n            \\\"DCA: Not enough balance returned\\\"\\n        );\\n\\n        emit SwapExecuted(\\n            _sellToken,\\n            _buyToken,\\n            swapAmount,\\n            requiredAmount,\\n            _period\\n        );\\n    }\\n\\n    /// Withdraw the funds that were already swapped for the caller user.\\n    /// @param index the index of the |orders| array for msg.sender.\\n    function withdrawSwapped(uint256 index) public {\\n        UserOrder storage order = orders[msg.sender][index];\\n        (\\n            uint256 amountToWithdraw,\\n            uint256 finalPeriod\\n        ) = calculateAmountToWithdraw(order);\\n        order.lastPeriodWithdrawal = finalPeriod;\\n\\n        require(\\n            order.buyToken.transfer(msg.sender, amountToWithdraw),\\n            \\\"DCA: Not enough funds to withdraw\\\"\\n        );\\n\\n        emit SwappedWithdrawal(\\n            msg.sender,\\n            index,\\n            address(order.buyToken),\\n            amountToWithdraw\\n        );\\n    }\\n\\n    /// Withdraw the funds that were already swapped for the caller user AND the\\n    /// funds that were not swapped yet, effectively terminating the position.\\n    /// @param index the index of the |orders| array for msg.sender.\\n    function withdrawAll(uint256 index) external {\\n        withdrawSwapped(index);\\n\\n        UserOrder storage order = orders[msg.sender][index];\\n        SwapState storage swapState = swapStates[address(order.sellToken)][\\n            address(order.buyToken)\\n        ];\\n\\n        uint256 finalPeriod = order.startingPeriod + order.numberOfSwaps - 1;\\n\\n        if (finalPeriod > swapState.lastSwapPeriod) {\\n            PeriodSwapState storage finalPeriodSwapState = periodsSwapStates[\\n                address(order.sellToken)\\n            ][address(order.buyToken)][finalPeriod];\\n\\n            swapState.amountToSwap -= order.amountPerSwap;\\n            finalPeriodSwapState.amountToReduce -= order.amountPerSwap;\\n            uint256 amountToWithdraw = order.amountPerSwap *\\n                (finalPeriod - swapState.lastSwapPeriod);\\n            order.lastPeriodWithdrawal = finalPeriod;\\n\\n            require(\\n                order.sellToken.transfer(msg.sender, amountToWithdraw),\\n                \\\"DCA: Not enough funds to withdraw\\\"\\n            );\\n\\n            emit RemainingWithdrawal(\\n                msg.sender,\\n                index,\\n                address(order.sellToken),\\n                amountToWithdraw\\n            );\\n        }\\n    }\\n\\n    function turnOffGuardrails() external onlyOwner {\\n        guardrailsOn = false;\\n    }\\n\\n    /// In case of emergency, in the beginning the owner can remove the funds to return them to users.\\n    /// Should be turned off before receiving any meaningful deposits by calling |turnOffGuardrails|.\\n    function emergencyWithdrawal(IERC20 token, address to) external onlyOwner {\\n        require(guardrailsOn, \\\"DCA: Guardrails are off\\\");\\n        uint256 balance = token.balanceOf(address(this));\\n        require(token.transfer(to, balance), \\\"DCA: Emergency transfer failed\\\");\\n        emit EmergencyWithdrawal(address(token), balance, to);\\n    }\\n\\n    /// Change the address that can update the oracle.\\n    function setOracleUpdater(address _newOracleUpdater)\\n        external\\n        onlyOracleUpdater\\n    {\\n        oracleUpdater = _newOracleUpdater;\\n        emit OracleUpdaterChanged(_newOracleUpdater);\\n    }\\n\\n    /// Update the oracle\\n    function setOracle(Oracle _newOracle) public onlyOracleUpdater {\\n        oracle = _newOracle;\\n        emit OracleSet(address(oracle));\\n    }\\n\\n    /// Update the beneficiary\\n    function setBeneficiary(address _beneficiary) public onlyOwner {\\n        beneficiary = _beneficiary;\\n        emit BeneficiarySet(_beneficiary);\\n    }\\n\\n    /// Update the fee\\n    function setFeeNumerator(uint256 _feeNumerator) public onlyOwner {\\n        require(_feeNumerator <= MAX_FEE_NUMERATOR, \\\"DCA: Fee too high\\\");\\n        feeNumerator = _feeNumerator;\\n        emit FeeNumeratorSet(_feeNumerator);\\n    }\\n\\n    // From here to the bottom of the file are the view calls.\\n\\n    /// Calculates hoy much |buyToken| is available to withdraw for a user order.\\n    /// Takes into account previous withdrawals and fee taken.\\n    function calculateAmountToWithdraw(UserOrder memory order)\\n        public\\n        view\\n        returns (uint256 amountToWithdraw, uint256 finalPeriod)\\n    {\\n        SwapState memory swapState = swapStates[address(order.sellToken)][\\n            address(order.buyToken)\\n        ];\\n        finalPeriod = Math.min(\\n            swapState.lastSwapPeriod,\\n            order.startingPeriod + order.numberOfSwaps - 1\\n        );\\n        amountToWithdraw = 0;\\n        for (\\n            uint256 period = order.lastPeriodWithdrawal + 1;\\n            period <= finalPeriod;\\n            period++\\n        ) {\\n            PeriodSwapState memory periodSwapState = periodsSwapStates[\\n                address(order.sellToken)\\n            ][address(order.buyToken)][period];\\n            uint256 periodSwapAmount = (periodSwapState.exchangeRate *\\n                order.amountPerSwap) / 1e27;\\n            uint256 fee = (periodSwapAmount * periodSwapState.feeNumerator) /\\n                FEE_DENOMINATOR;\\n            amountToWithdraw += periodSwapAmount - fee;\\n        }\\n    }\\n\\n    function getCurrentPeriod() public view returns (uint256 period) {\\n        period = block.number / BLOCKS_PER_DAY;\\n    }\\n\\n    function getUserOrders(address userAddress)\\n        external\\n        view\\n        returns (UserOrder[] memory)\\n    {\\n        return orders[userAddress];\\n    }\\n\\n    function getSwapState(address sellToken, address buyToken)\\n        external\\n        view\\n        returns (SwapState memory)\\n    {\\n        return swapStates[sellToken][buyToken];\\n    }\\n\\n    function getPeriodSwapState(\\n        address sellToken,\\n        address buyToken,\\n        uint256 period\\n    ) external view returns (PeriodSwapState memory) {\\n        return periodsSwapStates[sellToken][buyToken][period];\\n    }\\n}\\n\",\"keccak256\":\"0xa95b262fd75f759c6680b2b127fd440e6b4ba49f2fe184d22a106010268edff8\",\"license\":\"BUSL-1.1\"},\"contracts/DCAViewer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./DCA.sol\\\";\\n\\ncontract DCAViewer is Ownable {\\n    /// Calculates hoy much |buyToken| has already been withdrawn for a user order.\\n    /// Takes into account fees taken.\\n    function calculateAmountWithdrawn(DCA dca, DCA.UserOrder memory order)\\n        public\\n        view\\n        returns (uint256 amountWithdrawn)\\n    {\\n        amountWithdrawn = 0;\\n        for (\\n            uint256 period = order.startingPeriod;\\n            period <= order.lastPeriodWithdrawal;\\n            period++\\n        ) {\\n            DCA.PeriodSwapState memory periodSwapState = dca.getPeriodSwapState(\\n                address(order.sellToken),\\n                address(order.buyToken),\\n                period\\n            );\\n            uint256 periodWithdrawAmount = (periodSwapState.exchangeRate *\\n                order.amountPerSwap) / 1e27;\\n            uint256 fee = (periodWithdrawAmount *\\n                periodSwapState.feeNumerator) / dca.FEE_DENOMINATOR();\\n            amountWithdrawn += periodWithdrawAmount - fee;\\n        }\\n    }\\n\\n    /// Returns the orders for a user with more information that can be shown on a front end.\\n    /// Might not work well if the user has too many orders, it's just for short-term convenience.\\n    function getUserOrdersWithExtras(DCA dca, address userAddress)\\n        external\\n        view\\n        returns (\\n            DCA.UserOrder[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        DCA.UserOrder[] memory userOrders = dca.getUserOrders(userAddress);\\n        uint256[] memory ordersLastPeriod = new uint256[](userOrders.length);\\n        uint256[] memory amountsToWithdraw = new uint256[](userOrders.length);\\n        uint256[] memory amountsWithdrawn = new uint256[](userOrders.length);\\n\\n        for (uint256 i = 0; i < userOrders.length; i++) {\\n            DCA.UserOrder memory order = userOrders[i];\\n            (uint256 amountToWithdraw, uint256 finalPeriod) = dca\\n                .calculateAmountToWithdraw(order);\\n            ordersLastPeriod[i] = finalPeriod;\\n            amountsToWithdraw[i] = amountToWithdraw;\\n            amountsWithdrawn[i] = calculateAmountWithdrawn(dca, order);\\n        }\\n\\n        return (\\n            userOrders,\\n            ordersLastPeriod,\\n            amountsToWithdraw,\\n            amountsWithdrawn,\\n            dca.getCurrentPeriod()\\n        );\\n    }\\n\\n    function getOrder(\\n        DCA dca,\\n        address userAddress,\\n        uint256 index\\n    ) external view returns (DCA.UserOrder memory) {\\n        return dca.getUserOrders(userAddress)[index];\\n    }\\n\\n    function getSwapStateAmountToReduce(\\n        DCA dca,\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _period\\n    ) external view returns (uint256) {\\n        return\\n            dca\\n                .getPeriodSwapState(_sellToken, _buyToken, _period)\\n                .amountToReduce;\\n    }\\n\\n    function getSwapStateExchangeRate(\\n        DCA dca,\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _period\\n    ) external view returns (uint256) {\\n        return\\n            dca.getPeriodSwapState(_sellToken, _buyToken, _period).exchangeRate;\\n    }\\n\\n    function emergency(IERC20 token) external onlyOwner {\\n        require(\\n            token.transfer(msg.sender, token.balanceOf(address(this))),\\n            \\\"SwapExecutor: Emergency withdrawal failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe56d7dcec9db4e83c5271374d080a74b848b9915717ce37a3ef7b7a60310ec2e\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface Oracle {\\n    function consult(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut\\n    ) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x00808b842e95a6c63365936c05d804d5f82a752b6541b95b5c8763b56eb78142\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISwapper {\\n    function swap(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _inAmount,\\n        uint256 _outAmount,\\n        bytes calldata _params\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa7084b5a2809672c9a513ea7f22e1c47af7c0320d5575ded394383e8c9faa0bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c938463325ce2ef146100da5750505050806345941ee0146100d157806369c3b7e2146100c8578063715018a6146100bf57806389aa67d1146100b65780638da5cb5b146100ad578063acb41c22146100a4578063ea376eea1461009b5763f2fde38b1461008e575b388080600080fd5b610096610ba7565b610086565b50610096610b32565b506100966109f3565b50610096610943565b50610096610875565b50610096610736565b50610096610650565b50610096610483565b3461035457837ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103545781359361011485610357565b6024359161012183610357565b80858061018773ffffffffffffffffffffffffffffffffffffffff8a16967f63c69f0800000000000000000000000000000000000000000000000000000000835288830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0381865afa948515610347575b8195610323575b506101a685516111fe565b6101b086516111fe565b906101bb87516111fe565b95835b885181101561029157806102406101d8610250938c61124d565b5188517f1b97e6e600000000000000000000000000000000000000000000000000000000815289818c818061020f878c8301610996565b03915afa8015610284575b89918a91610255575b5061022e858961124d565b52610239848961124d565b528c610edd565b61024a828b61124d565b52610d9f565b6101be565b905061027791508a3d8c1161027d575b61026f8183610834565b810190611290565b8f610223565b503d610265565b61028c610e28565b61021a565b5060206102e2969897949592988351928380927f086146d20000000000000000000000000000000000000000000000000000000082525afa948515610316575b946102e6575b5051958695866103ae565b0390f35b61030891945060203d811161030f575b6103008183610834565b810190610eab565b92876102d7565b503d6102f6565b61031e610e28565b6102d1565b6103409195503d8087833e6103388183610834565b810190611126565b938661019b565b61034f610e28565b610194565b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361037557565b600080fd5b90815180825260208080930193019160005b82811061039a575050505090565b83518552938101939281019260010161038c565b959493929160a087019160a08852805180935260c0808901936020809301916000905b8282106104195750505050926103f88361040693610414968b6080999703908c015261037a565b9088820360408a015261037a565b90868203606088015261037a565b930152565b909192958482826104776001948b5160a0809173ffffffffffffffffffffffffffffffffffffffff80825116855260208201511660208501526040810151604085015260608101516060850152608081015160808501520151910152565b019701939201906103d1565b5034610375576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261037557806000610593926105786004356104ca81610357565b73ffffffffffffffffffffffffffffffffffffffff906104ee828654163314610c9b565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529116908381602481855afa9081156105ec575b85916105cf575b506040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481019190915293849283919082906044820190565b03925af19182156105c2575b600092610595575b50506112be565b005b6105b49250803d106105bb575b6105ac8183610834565b8101906112a6565b388061058c565b503d6105a2565b6105ca610e28565b610584565b6105e69150843d861161030f576103008183610834565b38610534565b6105f4610e28565b61052d565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60809101126103755760043561062f81610357565b9060243561063c81610357565b9060443561064981610357565b9060643590565b5034610375576020806106db606073ffffffffffffffffffffffffffffffffffffffff61067c366105f9565b6040517f21ba7d6300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152938492839182906064820190565b0392165afa908115610729575b6000916106fb575b500151604051908152f35b61071c915060603d8111610722575b6107148183610834565b810190610dd9565b386106f0565b503d61070a565b610731610e28565b6106e8565b5034610375576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103545780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916107ad338414610c9b565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60c0810190811067ffffffffffffffff82111761082757604052565b61082f6107db565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761082757604052565b50346103755760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610375576004356108b181610357565b60c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc360112610375576109336102e291604051906108ef8261080b565b6024356108fb81610357565b825260443561090981610357565b60208301526064356040830152608435606083015260a435608083015260c43560a0830152610edd565b6040519081529081906020820190565b50346103755760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261037557602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6109f19092919260c081019360a0809173ffffffffffffffffffffffffffffffffffffffff80825116855260208201511660208501526040810151604085015260608101516060850152608081015160808501520151910152565b565b50346103755760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610375576102e2610afd60a073ffffffffffffffffffffffffffffffffffffffff600435610a4c81610357565b610ade60243591610a5c83610357565b60405192610a698461080b565b60008096858280975282602082015282604082015282606082015282608082015201526040519485809481937f63c69f080000000000000000000000000000000000000000000000000000000083526004830191909173ffffffffffffffffffffffffffffffffffffffff6020820193169052565b0392165afa918215610b25575b8092610b0a575b50506044359061124d565b5160405191829182610996565b610b1e92503d8091833e6103388183610834565b3880610af2565b610b2d610e28565b610aeb565b5034610375576020610b5d606073ffffffffffffffffffffffffffffffffffffffff61067c366105f9565b0392165afa908115610b9a575b600091610b7c575b5051604051908152f35b610b94915060603d8111610722576107148183610834565b38610b72565b610ba2610e28565b610b6a565b50346103755760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261037557600435610be381610357565b73ffffffffffffffffffffffffffffffffffffffff610c0781600054163314610c9b565b811615610c175761059390610d00565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b15610ca257565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610dcd570190565b610dd5610d6f565b0190565b908160609103126103755760408051916060830183811067ffffffffffffffff821117610e1b575b825280518352602081015160208401520151604082015290565b610e236107db565b610e01565b506040513d6000823e3d90fd5b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516610e66570290565b610e6e610d6f565b0290565b8115610e7c570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b90816020910312610375575190565b818110610ec5570390565b610ecd610d6f565b0390565b81198111610dcd570190565b6080820151929190600090815b60a084015186116110f85761107e61108491611078868973ffffffffffffffffffffffffffffffffffffffff8716610f52610f39845173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b90602091610f79610f398487015173ffffffffffffffffffffffffffffffffffffffff1690565b916040928351907f21ba7d630000000000000000000000000000000000000000000000000000000082528180610fe36060998a9460049889850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b0381855afa9586156110eb575b8d966110b6575b5050839061103184611028611016899a836110729b5191015190610e35565b6b033b2e3c9fd0803ce8000000900490565b98015188610e35565b9351928380927fd73792a90000000000000000000000000000000000000000000000000000000082525afa9283156110a9575b8b9361108a575b5050610e72565b90610eba565b90610ed1565b95610d9f565b94610eea565b6110a1929350803d1061030f576103008183610834565b90388061106b565b6110b1610e28565b611064565b6110729650846110286110166110de8996958561103196903d10610722576107148183610834565b9950505050819250610ff7565b6110f3610e28565b610ff0565b9450505050565b60209067ffffffffffffffff8111611119575b60051b0190565b6111216107db565b611112565b60209081818403126103755780519067ffffffffffffffff8211610375570182601f820112156103755780519161115c836110ff565b93604061116b81519687610834565b848652828601918360c080970286010194818611610375578401925b858410611198575050505050505090565b86848303126103755784879184516111af8161080b565b86516111ba81610357565b8152828701516111c981610357565b838201528587015186820152606080880151908201526080808801519082015260a08088015190820152815201930192611187565b90611208826110ff565b6112156040519182610834565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061124382946110ff565b0190602036910137565b80518210156112615760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190826040910312610375576020825192015190565b90816020910312610375575180151581036103755790565b156112c557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f537761704578656375746f723a20456d657267656e637920776974686472617760448201527f616c206661696c656400000000000000000000000000000000000000000000006064820152fdfea2646970667358221220488593a8a006f76f135e23518a6ed8e82c7f39c726ef1c78c51176112dd5d65f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateAmountWithdrawn(address,(address,address,uint256,uint256,uint256,uint256))": {
        "notice": "Calculates hoy much |buyToken| has already been withdrawn for a user order. Takes into account fees taken."
      },
      "getUserOrdersWithExtras(address,address)": {
        "notice": "Returns the orders for a user with more information that can be shown on a front end. Might not work well if the user has too many orders, it's just for short-term convenience."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DCAViewer.sol:DCAViewer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}