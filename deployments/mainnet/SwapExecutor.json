{
  "address": "0x4D5ad15035344E1546044491cc52C609B7dF1A87",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISwappaRouterV1",
          "name": "_swappaRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "BeneficiarySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "emergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract DCA",
          "name": "dca",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "extras",
          "type": "bytes[]"
        }
      ],
      "name": "executeMezumoSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_params",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0bfaf859c4bdb5f4105da284127d7a1b4aecb65ca79bfab72ffdddde66797f1",
  "receipt": {
    "to": null,
    "from": "0xe59f139acBAB76d41623870F89f107d26Cf1E2B8",
    "contractAddress": "0x4D5ad15035344E1546044491cc52C609B7dF1A87",
    "transactionIndex": 2,
    "gasUsed": "1247103",
    "logsBloom": "0x
    "blockHash": "0x662536b638c49f5870cf0f590e9c34bb6383723769d18b81a765f67b04fd4f58",
    "transactionHash": "0xe0bfaf859c4bdb5f4105da284127d7a1b4aecb65ca79bfab72ffdddde66797f1",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 13780783,
        "transactionHash": "0xe0bfaf859c4bdb5f4105da284127d7a1b4aecb65ca79bfab72ffdddde66797f1",
        "address": "0x4D5ad15035344E1546044491cc52C609B7dF1A87",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e59f139acbab76d41623870f89f107d26cf1e2b8"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x662536b638c49f5870cf0f590e9c34bb6383723769d18b81a765f67b04fd4f58"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 13780783,
        "transactionHash": "0xe0bfaf859c4bdb5f4105da284127d7a1b4aecb65ca79bfab72ffdddde66797f1",
        "address": "0x4D5ad15035344E1546044491cc52C609B7dF1A87",
        "topics": [
          "0x04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24"
        ],
        "data": "0x00000000000000000000000076efd61146049612a78fa3e0e9bd0a8febc9dce0",
        "logIndex": 35,
        "blockHash": "0x662536b638c49f5870cf0f590e9c34bb6383723769d18b81a765f67b04fd4f58"
      }
    ],
    "blockNumber": 13780783,
    "cumulativeGasUsed": "2475731",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF35ed7156BABF2541E032B3bB8625210316e2832",
    "0x76efD61146049612A78Fa3e0E9BD0a8Febc9dCe0"
  ],
  "numDeployments": 14,
  "solcInputHash": "109aa8e1c7d6e2f21b38b6db3a6b47a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISwappaRouterV1\",\"name\":\"_swappaRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DCA\",\"name\":\"dca\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"name\":\"executeMezumoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapExecutor.sol\":\"SwapExecutor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/DCA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\n/// @title DCA\\n/// This contract allows users to deposit one token and gradually swaps it for another one\\n/// every day at the price it's trading at, allowing user to buy the target token using a\\n/// Dollar-Cost Averaging (DCA) strategy.\\n/// @dev To perform the swaps, we aggregate the tokens for all the users and make one big\\n/// swap instead of many small ones.\\ncontract DCA is Ownable {\\n    /// Number of blocks in a day assuming 5 seconds per block. Works for the Celo blockchain.\\n    uint256 public constant BLOCKS_PER_DAY = 17280;\\n    /// Upper limit of the fee that can be charged on swaps. Has to be divided by\\n    /// |FEE_DENOMINATOR|. Equivalent to 60bps.\\n    uint256 public constant MAX_FEE_NUMERATOR = 6_000;\\n    uint256 public constant FEE_DENOMINATOR = 1_000_000;\\n\\n    event OrderCreated(\\n        address indexed userAddress,\\n        uint256 index,\\n        IERC20 indexed sellToken,\\n        IERC20 indexed buyToken,\\n        uint256 amountPerSwap,\\n        uint256 numberOfSwaps,\\n        uint256 startingPeriod\\n    );\\n    event SwapExecuted(\\n        address indexed sellToken,\\n        address indexed buyToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 indexed period\\n    );\\n    /// Emitted when a user withdraws the funds that were already swapped.\\n    event SwappedWithdrawal(\\n        address indexed userAddress,\\n        uint256 indexed index,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    /// Emitted when a user withdraws their principal early. ie. before it was swapped.\\n    event RemainingWithdrawal(\\n        address indexed userAddress,\\n        uint256 indexed index,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    event TokenPairInitialized(address sellToken, address buyToken);\\n    event EmergencyWithdrawal(address token, uint256 amount, address to);\\n    event OracleUpdaterChanged(address oracleUpdater);\\n    event OracleSet(address oracle);\\n    event BeneficiarySet(address newBeneficiary);\\n    event FeeNumeratorSet(uint256 feeNumerator);\\n\\n    /// Contains information about one specific user order.\\n    /// A period is defined as a block number divided by |BLOCKS_PER_DAY|.\\n    struct UserOrder {\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        uint256 amountPerSwap;\\n        uint256 numberOfSwaps;\\n        uint256 startingPeriod;\\n        uint256 lastPeriodWithdrawal;\\n    }\\n\\n    /// Contains information about the swapping status of a token pair.\\n    struct SwapState {\\n        uint256 amountToSwap;\\n        uint256 lastSwapPeriod;\\n    }\\n\\n    /// For a given (sellToken, buyToken, period) tuple it returns the exchange rate used (if\\n    /// the period is in the past), how many daily swap tokens have their last day on that period\\n    /// and the fee charged in the period if it's in the past.\\n    struct PeriodSwapState {\\n        /// For each past period, what exchange rate was used.\\n        uint256 exchangeRate;\\n        /// For each future period, how much to reduce to |amountToSwap| in its SwapState.\\n        uint256 amountToReduce;\\n        /// For past periods, the fee numerator used on the swap.\\n        uint256 feeNumerator;\\n    }\\n\\n    /// Contains the state of a token pair swaps. For a given (sellToken, buyToken)\\n    /// it contains how much it should swap in the next period and when the last period was.\\n    mapping(address => mapping(address => SwapState)) public swapStates;\\n    /// Contains information related to swaps for a (sellToken, buyToken, period) tuple.\\n    /// See |PeriodSwapState| for more info.\\n    mapping(address => mapping(address => mapping(uint256 => PeriodSwapState)))\\n        public periodsSwapStates;\\n    /// A list of |UserOrder| for each user address.\\n    mapping(address => UserOrder[]) public orders;\\n\\n    /// Active fee on swaps. To be used together with |FEE_DENOMINATOR|.\\n    uint256 public feeNumerator;\\n    /// Where to send the fees.\\n    address public beneficiary;\\n    /// Oracle to use to get the amount to receive on swaps.\\n    Oracle public oracle;\\n    /// If true, the owner can withdraw funds. Should be turned off after there is sufficient confidence\\n    /// in the code, for example after audits.\\n    bool public guardrailsOn;\\n    /// Address that can update the oracle. Matches the owner at first, but should be operated by the\\n    /// community after a while.\\n    address public oracleUpdater;\\n\\n    /// @dev Throws if called by any account other than the oracle updater.\\n    modifier onlyOracleUpdater() {\\n        require(\\n            oracleUpdater == msg.sender,\\n            \\\"DCA: caller is not the oracle updater\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        Oracle _oracle,\\n        address _beneficiary,\\n        uint256 initialFee\\n    ) {\\n        guardrailsOn = true;\\n        oracleUpdater = msg.sender;\\n        setOracle(_oracle);\\n        setBeneficiary(_beneficiary);\\n        setFeeNumerator(initialFee);\\n    }\\n\\n    /// Starts a new DCA position for the |msg.sender|. When creating a new position, we\\n    /// add the |_amountPerSwap| to the |amountToSwap| variable on |SwapState| and to\\n    /// |amountToReduce| on the final period's |PeriodSwapState|. Thus, the amount to swap\\n    /// daily will increase between the current period and the final one.\\n    /// @param _sellToken token to sell on each period.\\n    /// @param _buyToken token to buy on each period.\\n    /// @param _amountPerSwap amount of _sellToken to sell each period.\\n    /// @param _numberOfSwaps number of periods to do the swapping.\\n    function createOrder(\\n        IERC20 _sellToken,\\n        IERC20 _buyToken,\\n        uint256 _amountPerSwap,\\n        uint256 _numberOfSwaps\\n    ) external returns (uint256 index) {\\n        require(\\n            _sellToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _amountPerSwap * _numberOfSwaps\\n            ),\\n            \\\"DCA: Not enough funds\\\"\\n        );\\n\\n        SwapState storage swapState = swapStates[address(_sellToken)][\\n            address(_buyToken)\\n        ];\\n        // If it's the first order for this pair, initialize it.\\n        if (swapState.lastSwapPeriod == 0) {\\n            swapState.lastSwapPeriod = getCurrentPeriod() - 1;\\n            emit TokenPairInitialized(address(_sellToken), address(_buyToken));\\n        }\\n        uint256 startingPeriod = swapState.lastSwapPeriod + 1;\\n        UserOrder memory newOrder = UserOrder(\\n            _sellToken,\\n            _buyToken,\\n            _amountPerSwap,\\n            _numberOfSwaps,\\n            startingPeriod,\\n            swapState.lastSwapPeriod\\n        );\\n\\n        swapState.amountToSwap += _amountPerSwap;\\n        periodsSwapStates[address(_sellToken)][address(_buyToken)][\\n            startingPeriod + _numberOfSwaps - 1\\n        ].amountToReduce += _amountPerSwap;\\n\\n        index = orders[msg.sender].length;\\n        orders[msg.sender].push(newOrder);\\n\\n        emit OrderCreated(\\n            msg.sender,\\n            index,\\n            _sellToken,\\n            _buyToken,\\n            _amountPerSwap,\\n            _numberOfSwaps,\\n            startingPeriod\\n        );\\n    }\\n\\n    /// Executes a swap between two tokens. The period must be the last executed + 1.\\n    /// The swapping is done by the |_swapper|. We calculate the required exchange rate using\\n    /// an oracle, send them the funds to swap and expect them to return the calculated return\\n    /// amount. This allows us to more easily add pairs since we just need the oracle support,\\n    /// not the exact routes to follow. Callers are incentivized to call this function for\\n    /// the arbitrage opportunity.\\n    ///\\n    /// In other words, the general logic followed here is:\\n    /// - Calculate and send the fee to the |beneficiary|.\\n    /// - Calculate the exchange rate using |oracle|.\\n    /// - Send the swap amount to |_swapper| can call its |swap| function.\\n    /// - Check that it returned the required funds taking the exchange rate into account.\\n    /// @param _sellToken token to sell on the swap.\\n    /// @param _buyToken token to buy on the swap.\\n    /// @param _period period to perform the swap for. It has only one possible valid\\n    /// value, so it is not strictly necessary.\\n    /// @param _swapper address that will perform the swap.\\n    /// @param _params params to send to |_swapper| for performing the swap.\\n    function executeOrder(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _period,\\n        address _swapper,\\n        bytes memory _params\\n    ) external {\\n        SwapState storage swapState = swapStates[_sellToken][_buyToken];\\n        require(swapState.lastSwapPeriod + 1 == _period, \\\"DCA: Invalid period\\\");\\n        require(\\n            _period <= getCurrentPeriod(),\\n            \\\"DCA: Period cannot be in the future\\\"\\n        );\\n        uint256 fee = (swapState.amountToSwap * feeNumerator) / FEE_DENOMINATOR;\\n        uint256 swapAmount = swapState.amountToSwap - fee;\\n\\n        uint256 requiredAmount = oracle.consult(\\n            _sellToken,\\n            swapAmount,\\n            _buyToken\\n        );\\n        require(requiredAmount > 0, \\\"DCA: Oracle failure\\\");\\n\\n        PeriodSwapState storage periodSwapState = periodsSwapStates[_sellToken][\\n            _buyToken\\n        ][_period];\\n\\n        swapState.lastSwapPeriod++;\\n        swapState.amountToSwap -= periodSwapState.amountToReduce;\\n        periodSwapState.exchangeRate = (requiredAmount * 1e18) / swapAmount;\\n        periodSwapState.feeNumerator = feeNumerator;\\n\\n        require(\\n            IERC20(_sellToken).transfer(beneficiary, fee),\\n            \\\"DCA: Fee transfer to beneficiary failed\\\"\\n        );\\n\\n        uint256 balanceBefore = IERC20(_buyToken).balanceOf(address(this));\\n        require(\\n            IERC20(_sellToken).transfer(_swapper, swapAmount),\\n            \\\"DCA: Transfer to Swapper failed\\\"\\n        );\\n        ISwapper(_swapper).swap(\\n            _sellToken,\\n            _buyToken,\\n            swapAmount,\\n            requiredAmount,\\n            _params\\n        );\\n        require(\\n            balanceBefore + requiredAmount <=\\n                IERC20(_buyToken).balanceOf(address(this)),\\n            \\\"DCA: Not enough balance returned\\\"\\n        );\\n\\n        emit SwapExecuted(\\n            _sellToken,\\n            _buyToken,\\n            swapAmount,\\n            requiredAmount,\\n            _period\\n        );\\n    }\\n\\n    /// Withdraw the funds that were already swapped for the caller user.\\n    /// @param index the index of the |orders| array for msg.sender.\\n    function withdrawSwapped(uint256 index) public {\\n        UserOrder storage order = orders[msg.sender][index];\\n        (\\n            uint256 amountToWithdraw,\\n            uint256 finalPeriod\\n        ) = calculateAmountToWithdraw(order);\\n        order.lastPeriodWithdrawal = finalPeriod;\\n\\n        require(\\n            order.buyToken.transfer(msg.sender, amountToWithdraw),\\n            \\\"DCA: Not enough funds to withdraw\\\"\\n        );\\n\\n        emit SwappedWithdrawal(\\n            msg.sender,\\n            index,\\n            address(order.buyToken),\\n            amountToWithdraw\\n        );\\n    }\\n\\n    /// Withdraw the funds that were already swapped for the caller user AND the\\n    /// funds that were not swapped yet, effectively terminating the position.\\n    /// @param index the index of the |orders| array for msg.sender.\\n    function withdrawAll(uint256 index) external {\\n        withdrawSwapped(index);\\n\\n        UserOrder storage order = orders[msg.sender][index];\\n        SwapState storage swapState = swapStates[address(order.sellToken)][\\n            address(order.buyToken)\\n        ];\\n\\n        uint256 finalPeriod = order.startingPeriod + order.numberOfSwaps - 1;\\n\\n        if (finalPeriod > swapState.lastSwapPeriod) {\\n            PeriodSwapState storage finalPeriodSwapState = periodsSwapStates[\\n                address(order.sellToken)\\n            ][address(order.buyToken)][finalPeriod];\\n\\n            swapState.amountToSwap -= order.amountPerSwap;\\n            finalPeriodSwapState.amountToReduce -= order.amountPerSwap;\\n            uint256 amountToWithdraw = order.amountPerSwap *\\n                (finalPeriod - swapState.lastSwapPeriod);\\n            order.lastPeriodWithdrawal = finalPeriod;\\n\\n            require(\\n                order.sellToken.transfer(msg.sender, amountToWithdraw),\\n                \\\"DCA: Not enough funds to withdraw\\\"\\n            );\\n\\n            emit RemainingWithdrawal(\\n                msg.sender,\\n                index,\\n                address(order.sellToken),\\n                amountToWithdraw\\n            );\\n        }\\n    }\\n\\n    function turnOffGuardrails() external onlyOwner {\\n        guardrailsOn = false;\\n    }\\n\\n    /// In case of emergency, in hte beginning the owner can remove the funds to return them to users.\\n    /// Should be turned off before receiving any meaningful deposits by calling |turnOffGuardrails|.\\n    function emergencyWithdrawal(IERC20 token, address to) external onlyOwner {\\n        require(guardrailsOn, \\\"DCA: Guardrails are off\\\");\\n        uint256 balance = token.balanceOf(address(this));\\n        require(token.transfer(to, balance), \\\"DCA: Emergency transfer failed\\\");\\n        emit EmergencyWithdrawal(address(token), balance, to);\\n    }\\n\\n    /// Change the address that can update the oracle.\\n    function setOracleUpdater(address _newOracleUpdater)\\n        external\\n        onlyOracleUpdater\\n    {\\n        oracleUpdater = _newOracleUpdater;\\n        emit OracleUpdaterChanged(_newOracleUpdater);\\n    }\\n\\n    /// Update the oracle\\n    function setOracle(Oracle _newOracle) public onlyOracleUpdater {\\n        oracle = _newOracle;\\n        emit OracleSet(address(oracle));\\n    }\\n\\n    /// Update the beneficiary\\n    function setBeneficiary(address _beneficiary) public onlyOwner {\\n        beneficiary = _beneficiary;\\n        emit BeneficiarySet(_beneficiary);\\n    }\\n\\n    /// Update the fee\\n    function setFeeNumerator(uint256 _feeNumerator) public onlyOwner {\\n        require(_feeNumerator <= MAX_FEE_NUMERATOR, \\\"DCA: Fee too high\\\");\\n        feeNumerator = _feeNumerator;\\n        emit FeeNumeratorSet(_feeNumerator);\\n    }\\n\\n    // From here to the bottom of the file are the view calls.\\n\\n    /// Calculates hoy much |buyToken| is available to withdraw for a user order.\\n    /// Takes into account previous withdrawals and fee taken.\\n    function calculateAmountToWithdraw(UserOrder memory order)\\n        public\\n        view\\n        returns (uint256 amountToWithdraw, uint256 finalPeriod)\\n    {\\n        SwapState memory swapState = swapStates[address(order.sellToken)][\\n            address(order.buyToken)\\n        ];\\n        finalPeriod = Math.min(\\n            swapState.lastSwapPeriod,\\n            order.startingPeriod + order.numberOfSwaps - 1\\n        );\\n        amountToWithdraw = 0;\\n        for (\\n            uint256 period = order.lastPeriodWithdrawal + 1;\\n            period <= finalPeriod;\\n            period++\\n        ) {\\n            PeriodSwapState memory periodSwapState = periodsSwapStates[\\n                address(order.sellToken)\\n            ][address(order.buyToken)][period];\\n            uint256 periodSwapAmount = (periodSwapState.exchangeRate *\\n                order.amountPerSwap) / 1e18;\\n            uint256 fee = (periodSwapAmount * periodSwapState.feeNumerator) /\\n                FEE_DENOMINATOR;\\n            amountToWithdraw += periodSwapAmount - fee;\\n        }\\n    }\\n\\n    function getCurrentPeriod() public view returns (uint256 period) {\\n        period = block.number / BLOCKS_PER_DAY;\\n    }\\n\\n    function getUserOrders(address userAddress)\\n        external\\n        view\\n        returns (UserOrder[] memory)\\n    {\\n        return orders[userAddress];\\n    }\\n\\n    function getSwapState(address sellToken, address buyToken)\\n        external\\n        view\\n        returns (SwapState memory)\\n    {\\n        return swapStates[sellToken][buyToken];\\n    }\\n\\n    function getPeriodSwapState(\\n        address sellToken,\\n        address buyToken,\\n        uint256 period\\n    ) external view returns (PeriodSwapState memory) {\\n        return periodsSwapStates[sellToken][buyToken][period];\\n    }\\n}\\n\",\"keccak256\":\"0x79ba061c345ab9ae863fe4b6f9fa88622acad18bb79de747bd600f6023b277d7\",\"license\":\"BUSL-1.1\"},\"contracts/SwapExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISwappaRouter.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\nimport \\\"./DCA.sol\\\";\\n\\ncontract SwapExecutor is ISwapper, Ownable {\\n    event BeneficiarySet(address newBeneficiary);\\n\\n    ISwappaRouterV1 private swappaRouter;\\n    address public beneficiary;\\n\\n    constructor(ISwappaRouterV1 _swappaRouter, address _beneficiary) {\\n        swappaRouter = _swappaRouter;\\n        setBeneficiary(_beneficiary);\\n    }\\n\\n    function setBeneficiary(address _beneficiary) public onlyOwner {\\n        beneficiary = _beneficiary;\\n        emit BeneficiarySet(_beneficiary);\\n    }\\n\\n    function executeMezumoSwap(\\n        DCA dca,\\n        uint256 period,\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras\\n    ) external {\\n        bytes memory params = abi.encode(path, pairs, extras);\\n        dca.executeOrder(\\n            path[0],\\n            path[path.length - 1],\\n            period,\\n            address(this),\\n            params\\n        );\\n    }\\n\\n    function swap(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _inAmount,\\n        uint256 _outAmount,\\n        bytes calldata _params\\n    ) external {\\n        (\\n            address[] memory path,\\n            address[] memory pairs,\\n            bytes[] memory extras\\n        ) = abi.decode(_params, (address[], address[], bytes[]));\\n\\n        require(\\n            IERC20(_sellToken).approve(address(swappaRouter), _inAmount),\\n            \\\"SwapExecutor: Approval to Swappa failed\\\"\\n        );\\n        swappaRouter.swapExactInputForOutput(\\n            path,\\n            pairs,\\n            extras,\\n            _inAmount,\\n            _outAmount,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        require(\\n            IERC20(_buyToken).transfer(msg.sender, _outAmount),\\n            \\\"SwapExecutor: Transfer to DCA failed\\\"\\n        );\\n        require(\\n            IERC20(_buyToken).transfer(\\n                beneficiary,\\n                IERC20(_buyToken).balanceOf(address(this))\\n            ),\\n            \\\"SwapExecutor: Transfer to DCA failed\\\"\\n        );\\n    }\\n\\n    function emergency(IERC20 token) external {\\n        require(\\n            token.transfer(beneficiary, token.balanceOf(address(this))),\\n            \\\"SwapExecutor: Emergency withdrawal failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd4103dca5469fac6f59e6a72fa8910d1f7922558d869980a78d4dfa0a3736f3b\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface Oracle {\\n    function consult(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut\\n    ) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x00808b842e95a6c63365936c05d804d5f82a752b6541b95b5c8763b56eb78142\",\"license\":\"MIT\"},\"contracts/interfaces/ISwappaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISwappaRouterV1 {\\n    function getOutputAmount(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount\\n    ) external view returns (uint256 outputAmount);\\n\\n    function swapExactInputForOutput(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 outputAmount);\\n\\n    function swapExactInputForOutputWithPrecheck(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 outputAmount);\\n}\\n\",\"keccak256\":\"0x61618bfb87ceff6281fde3c1f50e6363d21fec0ec669c7909e68364f07affc1e\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISwapper {\\n    function swap(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _inAmount,\\n        uint256 _outAmount,\\n        bytes calldata _params\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa7084b5a2809672c9a513ea7f22e1c47af7c0320d5575ded394383e8c9faa0bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461006f57601f61159e38819003918201601f19168301916001600160401b0383118484101761007457808492604094855283398101031261006f5780602061006092519161004f8361008a565b01519061005b8261008a565b61009b565b604051611471908161012d8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381160361006f57565b60008054336001600160a01b0319808316821784556040517f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a2496602096919592946001600160a01b03949193859392918416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09089a31683600154161760015516809160025416176002558152a156fe60806040526004361015610013575b600080fd5b6000803560e01c9081631c31f710146100b6575080632506c018146100ad57806338af3eed146100a457806345941ee01461009b578063715018a6146100925780638da5cb5b14610089578063adc32210146100805763f2fde38b1461007857600080fd5b61000e6105fb565b5061000e61055a565b5061000e6104d6565b5061000e610431565b5061000e610285565b5061000e610232565b5061000e610190565b3461016f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016f577f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24602060043561011481610172565b73ffffffffffffffffffffffffffffffffffffffff906101388286541633146106ef565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006002541617600255604051908152a1604051f35b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356101cc81610172565b6024356101d881610172565b6084359167ffffffffffffffff9182841161000e573660238501121561000e57836004013592831161000e57366024848601011161000e576024610225940191606435916044359161105d565b005b600091031261000e57565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57806103a06102259273ffffffffffffffffffffffffffffffffffffffff6004356102df81610172565b166102ff60025473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291908383602481855afa928315610424575b6000936103f5575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af19182156103e8575b6000926103bb575b50506113b0565b6103da9250803d106103e1575b6103d281836108a8565b810190610df7565b38806103b4565b503d6103c8565b6103f0610a4e565b6103ac565b610416919350843d861161041d575b61040e81836108a8565b810190610e9a565b9138610345565b503d610404565b61042c610a4e565b61033d565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016f5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916104a83384146106ef565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561059681610172565b67ffffffffffffffff9060443582811161000e576105b8903690600401610529565b60649291923584811161000e576105d3903690600401610529565b9160843595861161000e576105ef610225963690600401610529565b95909460243590610a5b565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561063781610172565b73ffffffffffffffffffffffffffffffffffffffff61065b816000541633146106ef565b81161561066b5761022590610754565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b156106f657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b91908082526020809201929160005b8281106107e0575050505090565b90919293828060019273ffffffffffffffffffffffffffffffffffffffff883561080981610172565b168152019501939291016107d2565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161089b57604052565b6108a3610857565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761089b57604052565b90156108f25790565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156108f25760051b0190565b3561093b81610172565b90565b6001811061096b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908251928382526000905b8482106109f15750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093116109e4575b0116010190565b60008582860101526109dd565b906020908180828501015190828601015201906109a6565b91909360a09361093b969573ffffffffffffffffffffffffffffffffffffffff938480921686521660208501526040840152166060820152816080820152019061099a565b506040513d6000823e3d90fd5b9294969095939193604051978892610ab5602092606084870152610a83608087018b8b6107c3565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe097888884030160408901526107c3565b918585840301606086015281835280830192818360051b8201019480946000925b858410610bb1575050505050505092610b12610b219373ffffffffffffffffffffffffffffffffffffffff93610b3696039081018a52896108a8565b1692610b26610b2186836108e9565b610931565b94610b308161093e565b91610921565b92813b1561000e5760008094610b7d604051978896879586947f06dc1f6a000000000000000000000000000000000000000000000000000000008652309260048701610a09565b03925af18015610ba4575b610b8f5750565b80610b9c610ba292610887565b80610227565b565b610bac610a4e565b610b88565b91939597509193958882820301835287357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18536030181121561000e57840190813567ffffffffffffffff811161000e57803603861361000e57610c1c889283928360019601610818565b99019301940191949290938d979694610ad6565b60209067ffffffffffffffff8111610c4a575b60051b0190565b610c52610857565b610c43565b81601f8201121561000e57803591610c6e83610c30565b92610c7c60405194856108a8565b808452602092838086019260051b82010192831161000e578301905b828210610ca6575050505090565b8380918335610cb481610172565b815201910190610c98565b909160608284031261000e5767ffffffffffffffff91803583811161000e5784610cea918301610c57565b936020908183013585811161000e5781610d05918501610c57565b94604093848101359082821161000e570191601f81818501121561000e57833591610d2f83610c30565b96610d3c815198896108a8565b838852868089019460051b8701019582871161000e57878101945b878610610d6a5750505050505050505090565b853587811161000e57820184603f8201121561000e578981013591888311610dea575b8451610dbf8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a87011601826108a8565b8381528686858501011161000e5760008c858196898397018386013783010152815201950194610d57565b610df2610857565b610d8d565b9081602091031261000e5751801515810361000e5790565b15610e1657565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537761704578656375746f723a20417070726f76616c20746f2053776170706160448201527f206661696c6564000000000000000000000000000000000000000000000000006064820152fd5b9081602091031261000e575190565b90815180825260208080930193019160005b828110610ec9575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610ebb565b94929190610f11610f2091999897959960e0885260e0880190610ea9565b60209287820384890152610ea9565b9085820360408701528251908183528083019281808460051b8301019501936000915b848310610f875750505050505091610f839160c09493976060850152608084015260a083019073ffffffffffffffffffffffffffffffffffffffff169052565b0152565b9091929394958480610fc3837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086600196030187528a5161099a565b9801930193019194939290610f43565b15610fda57565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f537761704578656375746f723a205472616e7366657220746f2044434120666160448201527f696c6564000000000000000000000000000000000000000000000000000000006064820152fd5b938395810161106b91610cbf565b96919590926001546110909073ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024810186905296879660209687968792918a60448101038460009d8e92818473ffffffffffffffffffffffffffffffffffffffff809d165af19d8e15610ba29f6112c39e611144926113a3575b8491611386575b50610e0f565b6111bd61118261116960015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b94604051988997889687957f0862d12f0000000000000000000000000000000000000000000000000000000087524294309460048901610ef3565b03925af18015611379575b61135c575b506040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825233600483015260248201949094529116906112289084816044818b875af190811561134f575b8891611332575b50610fd3565b6002546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529273ffffffffffffffffffffffffffffffffffffffff9091169087908585602481875afa948515611325575b8295611306575b50604051978895869485938452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af19283156112f9575b926112dc575b5050610fd3565b6112f29250803d106103e1576103d281836108a8565b38806112d5565b611301610a4e565b6112cf565b61131e919550863d881161041d5761040e81836108a8565b933861128a565b61132d610a4e565b611283565b6113499150853d87116103e1576103d281836108a8565b38611222565b611357610a4e565b61121b565b61137290853d871161041d5761040e81836108a8565b50386111cd565b611381610a4e565b6111c8565b61139d9150883d8a116103e1576103d281836108a8565b3861113e565b6113ab610a4e565b611137565b156113b757565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f537761704578656375746f723a20456d657267656e637920776974686472617760448201527f616c206661696c656400000000000000000000000000000000000000000000006064820152fdfea2646970667358221220b8947e7b14bbbb2010836703acc2fa1f5beba576f23372d87ed9ef0a583c468164736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c9081631c31f710146100b6575080632506c018146100ad57806338af3eed146100a457806345941ee01461009b578063715018a6146100925780638da5cb5b14610089578063adc32210146100805763f2fde38b1461007857600080fd5b61000e6105fb565b5061000e61055a565b5061000e6104d6565b5061000e610431565b5061000e610285565b5061000e610232565b5061000e610190565b3461016f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016f577f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24602060043561011481610172565b73ffffffffffffffffffffffffffffffffffffffff906101388286541633146106ef565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006002541617600255604051908152a1604051f35b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356101cc81610172565b6024356101d881610172565b6084359167ffffffffffffffff9182841161000e573660238501121561000e57836004013592831161000e57366024848601011161000e576024610225940191606435916044359161105d565b005b600091031261000e57565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60025416604051908152f35b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57806103a06102259273ffffffffffffffffffffffffffffffffffffffff6004356102df81610172565b166102ff60025473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291908383602481855afa928315610424575b6000936103f5575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af19182156103e8575b6000926103bb575b50506113b0565b6103da9250803d106103e1575b6103d281836108a8565b810190610df7565b38806103b4565b503d6103c8565b6103f0610a4e565b6103ac565b610416919350843d861161041d575b61040e81836108a8565b810190610e9a565b9138610345565b503d610404565b61042c610a4e565b61033d565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016f5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8216916104a83384146106ef565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561059681610172565b67ffffffffffffffff9060443582811161000e576105b8903690600401610529565b60649291923584811161000e576105d3903690600401610529565b9160843595861161000e576105ef610225963690600401610529565b95909460243590610a5b565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561063781610172565b73ffffffffffffffffffffffffffffffffffffffff61065b816000541633146106ef565b81161561066b5761022590610754565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b156106f657565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b91908082526020809201929160005b8281106107e0575050505090565b90919293828060019273ffffffffffffffffffffffffffffffffffffffff883561080981610172565b168152019501939291016107d2565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff811161089b57604052565b6108a3610857565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761089b57604052565b90156108f25790565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91908110156108f25760051b0190565b3561093b81610172565b90565b6001811061096b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908251928382526000905b8482106109f15750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093116109e4575b0116010190565b60008582860101526109dd565b906020908180828501015190828601015201906109a6565b91909360a09361093b969573ffffffffffffffffffffffffffffffffffffffff938480921686521660208501526040840152166060820152816080820152019061099a565b506040513d6000823e3d90fd5b9294969095939193604051978892610ab5602092606084870152610a83608087018b8b6107c3565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe097888884030160408901526107c3565b918585840301606086015281835280830192818360051b8201019480946000925b858410610bb1575050505050505092610b12610b219373ffffffffffffffffffffffffffffffffffffffff93610b3696039081018a52896108a8565b1692610b26610b2186836108e9565b610931565b94610b308161093e565b91610921565b92813b1561000e5760008094610b7d604051978896879586947f06dc1f6a000000000000000000000000000000000000000000000000000000008652309260048701610a09565b03925af18015610ba4575b610b8f5750565b80610b9c610ba292610887565b80610227565b565b610bac610a4e565b610b88565b91939597509193958882820301835287357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18536030181121561000e57840190813567ffffffffffffffff811161000e57803603861361000e57610c1c889283928360019601610818565b99019301940191949290938d979694610ad6565b60209067ffffffffffffffff8111610c4a575b60051b0190565b610c52610857565b610c43565b81601f8201121561000e57803591610c6e83610c30565b92610c7c60405194856108a8565b808452602092838086019260051b82010192831161000e578301905b828210610ca6575050505090565b8380918335610cb481610172565b815201910190610c98565b909160608284031261000e5767ffffffffffffffff91803583811161000e5784610cea918301610c57565b936020908183013585811161000e5781610d05918501610c57565b94604093848101359082821161000e570191601f81818501121561000e57833591610d2f83610c30565b96610d3c815198896108a8565b838852868089019460051b8701019582871161000e57878101945b878610610d6a5750505050505050505090565b853587811161000e57820184603f8201121561000e578981013591888311610dea575b8451610dbf8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a87011601826108a8565b8381528686858501011161000e5760008c858196898397018386013783010152815201950194610d57565b610df2610857565b610d8d565b9081602091031261000e5751801515810361000e5790565b15610e1657565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537761704578656375746f723a20417070726f76616c20746f2053776170706160448201527f206661696c6564000000000000000000000000000000000000000000000000006064820152fd5b9081602091031261000e575190565b90815180825260208080930193019160005b828110610ec9575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610ebb565b94929190610f11610f2091999897959960e0885260e0880190610ea9565b60209287820384890152610ea9565b9085820360408701528251908183528083019281808460051b8301019501936000915b848310610f875750505050505091610f839160c09493976060850152608084015260a083019073ffffffffffffffffffffffffffffffffffffffff169052565b0152565b9091929394958480610fc3837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086600196030187528a5161099a565b9801930193019194939290610f43565b15610fda57565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f537761704578656375746f723a205472616e7366657220746f2044434120666160448201527f696c6564000000000000000000000000000000000000000000000000000000006064820152fd5b938395810161106b91610cbf565b96919590926001546110909073ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024810186905296879660209687968792918a60448101038460009d8e92818473ffffffffffffffffffffffffffffffffffffffff809d165af19d8e15610ba29f6112c39e611144926113a3575b8491611386575b50610e0f565b6111bd61118261116960015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b94604051988997889687957f0862d12f0000000000000000000000000000000000000000000000000000000087524294309460048901610ef3565b03925af18015611379575b61135c575b506040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825233600483015260248201949094529116906112289084816044818b875af190811561134f575b8891611332575b50610fd3565b6002546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529273ffffffffffffffffffffffffffffffffffffffff9091169087908585602481875afa948515611325575b8295611306575b50604051978895869485938452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af19283156112f9575b926112dc575b5050610fd3565b6112f29250803d106103e1576103d281836108a8565b38806112d5565b611301610a4e565b6112cf565b61131e919550863d881161041d5761040e81836108a8565b933861128a565b61132d610a4e565b611283565b6113499150853d87116103e1576103d281836108a8565b38611222565b611357610a4e565b61121b565b61137290853d871161041d5761040e81836108a8565b50386111cd565b611381610a4e565b6111c8565b61139d9150883d8a116103e1576103d281836108a8565b3861113e565b6113ab610a4e565b611137565b156113b757565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f537761704578656375746f723a20456d657267656e637920776974686472617760448201527f616c206661696c656400000000000000000000000000000000000000000000006064820152fdfea2646970667358221220b8947e7b14bbbb2010836703acc2fa1f5beba576f23372d87ed9ef0a583c468164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SwapExecutor.sol:SwapExecutor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2500,
        "contract": "contracts/SwapExecutor.sol:SwapExecutor",
        "label": "swappaRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISwappaRouterV1)2783"
      },
      {
        "astId": 2502,
        "contract": "contracts/SwapExecutor.sol:SwapExecutor",
        "label": "beneficiary",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISwappaRouterV1)2783": {
        "encoding": "inplace",
        "label": "contract ISwappaRouterV1",
        "numberOfBytes": "20"
      }
    }
  }
}