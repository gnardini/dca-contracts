{
  "address": "0x75e612f4b0395B4f66590A05eC528dec938376A9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract DCA",
          "name": "_dca",
          "type": "address"
        },
        {
          "internalType": "contract ISwappaRouterV1",
          "name": "_swappaRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "BeneficiarySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "emergency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "extras",
          "type": "bytes[]"
        }
      ],
      "name": "executeMezumoSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_params",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb0afffcc4049bfe3889510a42470d7c454984b80efb6d8e594edc9c9533eeb8",
  "receipt": {
    "to": null,
    "from": "0xe59f139acBAB76d41623870F89f107d26Cf1E2B8",
    "contractAddress": "0x75e612f4b0395B4f66590A05eC528dec938376A9",
    "transactionIndex": 5,
    "gasUsed": "1278201",
    "logsBloom": "0x
    "blockHash": "0x948ed84cca6a109bd51e80681357bd1cd66e20bd095c66d29e6e43c08775ee6a",
    "transactionHash": "0xcb0afffcc4049bfe3889510a42470d7c454984b80efb6d8e594edc9c9533eeb8",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 13569453,
        "transactionHash": "0xcb0afffcc4049bfe3889510a42470d7c454984b80efb6d8e594edc9c9533eeb8",
        "address": "0x75e612f4b0395B4f66590A05eC528dec938376A9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e59f139acbab76d41623870f89f107d26cf1e2b8"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0x948ed84cca6a109bd51e80681357bd1cd66e20bd095c66d29e6e43c08775ee6a"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 13569453,
        "transactionHash": "0xcb0afffcc4049bfe3889510a42470d7c454984b80efb6d8e594edc9c9533eeb8",
        "address": "0x75e612f4b0395B4f66590A05eC528dec938376A9",
        "topics": [
          "0x04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24"
        ],
        "data": "0x00000000000000000000000076efd61146049612a78fa3e0e9bd0a8febc9dce0",
        "logIndex": 45,
        "blockHash": "0x948ed84cca6a109bd51e80681357bd1cd66e20bd095c66d29e6e43c08775ee6a"
      }
    ],
    "blockNumber": 13569453,
    "cumulativeGasUsed": "2356938",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0e0f930d4712c2104D8A5AEAf65f2c77a57fc3ec",
    "0xF35ed7156BABF2541E032B3bB8625210316e2832",
    "0x76efD61146049612A78Fa3e0E9BD0a8Febc9dCe0"
  ],
  "numDeployments": 13,
  "solcInputHash": "c0c774333706ff6479e6c30278bbe18f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract DCA\",\"name\":\"_dca\",\"type\":\"address\"},{\"internalType\":\"contract ISwappaRouterV1\",\"name\":\"_swappaRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"emergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"extras\",\"type\":\"bytes[]\"}],\"name\":\"executeMezumoSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapExecutor.sol\":\"SwapExecutor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/DCA.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\ncontract DCA is Ownable {\\n    uint256 public constant BLOCKS_PER_DAY = 17280;\\n    uint256 public constant MAX_FEE_NUMERATOR = 6_000; // max 60 bps.\\n    uint256 public constant FEE_DENOMINATOR = 1_000_000;\\n\\n    event OrderCreated(\\n        address indexed userAddress,\\n        uint256 index,\\n        IERC20 indexed sellToken,\\n        IERC20 indexed buyToken,\\n        uint256 amountPerSwap,\\n        uint256 numberOfSwaps,\\n        uint256 startingPeriod\\n    );\\n    event SwapExecuted(\\n        address indexed sellToken,\\n        address indexed buyToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 indexed period\\n    );\\n    event SwappedWithdrawal(\\n        address indexed userAddress,\\n        uint256 indexed index,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    event RemainingWithdrawal(\\n        address indexed userAddress,\\n        uint256 indexed index,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    event TokenPairInitialized(address sellToken, address buyToken);\\n    event EmergencyWithdrawal(address token, uint256 amount, address to);\\n    event OracleSet(address oracle);\\n    event OracleAddressMappingSet(address from, address to);\\n    event BeneficiarySet(address newBeneficiary);\\n    event FeeNumeratorSet(uint256 feeNumerator);\\n\\n    struct UserOrder {\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        uint256 amountPerSwap;\\n        uint256 numberOfSwaps;\\n        uint256 startingPeriod;\\n        uint256 lastPeriodWithdrawal;\\n    }\\n\\n    struct SwapOrder {\\n        uint256 amountToSwap;\\n        uint256 lastPeriod;\\n        // For each past period, what exchange rate was used.\\n        mapping(uint256 => uint256) swapExchangeRates;\\n        // For each future period, how much to reduce to |amountToSwap|.\\n        mapping(uint256 => uint256) amountsToReduce;\\n        // The fee numerator used on each period's swap.\\n        mapping(uint256 => uint256) feeOnPeriod;\\n    }\\n\\n    // sellToken => buyToken => SwapOrder\\n    mapping(address => mapping(address => SwapOrder)) public swapOrders;\\n    // userAddress => UserOrder list\\n    mapping(address => UserOrder[]) public orders;\\n    // For cUSD, we need to use mcUSD in the oracle because of Ubeswap liquidity. Same with cEUR/cREAL.\\n    mapping(address => address) public oracleAddresses;\\n\\n    uint256 public feeNumerator;\\n    address public beneficiary;\\n    Oracle public oracle;\\n\\n    constructor(\\n        Oracle _oracle,\\n        address _beneficiary,\\n        uint256 initialFee\\n    ) {\\n        setOracle(_oracle);\\n        setBeneficiary(_beneficiary);\\n        setFeeNumerator(initialFee);\\n    }\\n\\n    function createOrder(\\n        IERC20 _sellToken,\\n        IERC20 _buyToken,\\n        uint256 _amountPerSwap,\\n        uint256 _numberOfSwaps\\n    ) external returns (uint256 index) {\\n        require(\\n            _sellToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _amountPerSwap * _numberOfSwaps\\n            ),\\n            \\\"DCA: Not enough funds\\\"\\n        );\\n\\n        SwapOrder storage swapOrder = swapOrders[address(_sellToken)][\\n            address(_buyToken)\\n        ];\\n        if (swapOrder.lastPeriod == 0) {\\n            swapOrder.lastPeriod = getCurrentPeriod() - 1;\\n            emit TokenPairInitialized(address(_sellToken), address(_buyToken));\\n        }\\n        uint256 startingPeriod = swapOrder.lastPeriod + 1;\\n        UserOrder memory newOrder = UserOrder(\\n            _sellToken,\\n            _buyToken,\\n            _amountPerSwap,\\n            _numberOfSwaps,\\n            startingPeriod,\\n            swapOrder.lastPeriod\\n        );\\n\\n        swapOrder.amountToSwap += _amountPerSwap;\\n        swapOrder.amountsToReduce[\\n            startingPeriod + _numberOfSwaps - 1\\n        ] += _amountPerSwap;\\n\\n        index = orders[msg.sender].length;\\n        orders[msg.sender].push(newOrder);\\n\\n        emit OrderCreated(\\n            msg.sender,\\n            index,\\n            _sellToken,\\n            _buyToken,\\n            _amountPerSwap,\\n            _numberOfSwaps,\\n            startingPeriod\\n        );\\n    }\\n\\n    function executeOrder(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _period,\\n        address _swapper,\\n        bytes memory _params\\n    ) external {\\n        SwapOrder storage swapOrder = swapOrders[_sellToken][_buyToken];\\n        require(swapOrder.lastPeriod + 1 == _period, \\\"DCA: Invalid period\\\");\\n        require(\\n            _period <= getCurrentPeriod(),\\n            \\\"DCA: Period cannot be in the future\\\"\\n        );\\n        uint256 fee = (swapOrder.amountToSwap * feeNumerator) / FEE_DENOMINATOR;\\n        uint256 swapAmount = swapOrder.amountToSwap - fee;\\n\\n        uint256 requiredAmount = oracle.consult(\\n            getOracleTokenAddress(_sellToken),\\n            swapAmount,\\n            getOracleTokenAddress(_buyToken)\\n        );\\n        require(requiredAmount > 0, \\\"DCA: Oracle failure\\\");\\n\\n        swapOrder.lastPeriod++;\\n        swapOrder.swapExchangeRates[_period] =\\n            (requiredAmount * 1e18) /\\n            swapAmount;\\n        swapOrder.amountToSwap -= swapOrder.amountsToReduce[_period];\\n        swapOrder.feeOnPeriod[_period] = feeNumerator;\\n\\n        require(\\n            IERC20(_sellToken).transfer(beneficiary, fee),\\n            \\\"DCA: Fee transfer to beneficiary failed\\\"\\n        );\\n\\n        uint256 balanceBefore = IERC20(_buyToken).balanceOf(address(this));\\n        require(\\n            IERC20(_sellToken).transfer(_swapper, swapAmount),\\n            \\\"DCA: Transfer to Swapper failed\\\"\\n        );\\n        ISwapper(_swapper).swap(\\n            _sellToken,\\n            _buyToken,\\n            swapAmount,\\n            requiredAmount,\\n            _params\\n        );\\n        require(\\n            balanceBefore + requiredAmount <=\\n                IERC20(_buyToken).balanceOf(address(this)),\\n            \\\"DCA: Not enough balance returned\\\"\\n        );\\n\\n        emit SwapExecuted(\\n            _sellToken,\\n            _buyToken,\\n            swapAmount,\\n            requiredAmount,\\n            _period\\n        );\\n    }\\n\\n    function withdrawSwapped(uint256 index) public {\\n        UserOrder storage order = orders[msg.sender][index];\\n        (\\n            uint256 amountToWithdraw,\\n            uint256 finalPeriod\\n        ) = calculateAmountToWithdraw(order);\\n        order.lastPeriodWithdrawal = finalPeriod;\\n\\n        require(\\n            order.buyToken.transfer(msg.sender, amountToWithdraw),\\n            \\\"DCA: Not enough funds to withdraw\\\"\\n        );\\n\\n        emit SwappedWithdrawal(\\n            msg.sender,\\n            index,\\n            address(order.buyToken),\\n            amountToWithdraw\\n        );\\n    }\\n\\n    function withdrawAll(uint256 index) external {\\n        withdrawSwapped(index);\\n\\n        UserOrder storage order = orders[msg.sender][index];\\n        SwapOrder storage swapOrder = swapOrders[address(order.sellToken)][\\n            address(order.buyToken)\\n        ];\\n\\n        uint256 finalPeriod = order.startingPeriod + order.numberOfSwaps - 1;\\n\\n        if (finalPeriod > swapOrder.lastPeriod) {\\n            swapOrder.amountToSwap -= order.amountPerSwap;\\n            swapOrder.amountsToReduce[finalPeriod] -= order.amountPerSwap;\\n            uint256 amountToWithdraw = order.amountPerSwap *\\n                (finalPeriod - swapOrder.lastPeriod);\\n            order.lastPeriodWithdrawal = finalPeriod;\\n\\n            require(\\n                order.sellToken.transfer(msg.sender, amountToWithdraw),\\n                \\\"DCA: Not enough funds to withdraw\\\"\\n            );\\n\\n            emit RemainingWithdrawal(\\n                msg.sender,\\n                index,\\n                address(order.sellToken),\\n                amountToWithdraw\\n            );\\n        }\\n    }\\n\\n    function emergencyWithdrawal(IERC20 token, address to) external onlyOwner {\\n        uint256 balance = token.balanceOf(address(this));\\n        require(token.transfer(to, balance), \\\"DCA: Emergency transfer failed\\\");\\n        emit EmergencyWithdrawal(address(token), balance, to);\\n    }\\n\\n    // Parameter setters\\n\\n    function setOracle(Oracle _newOracle) public onlyOwner {\\n        oracle = _newOracle;\\n        emit OracleSet(address(oracle));\\n    }\\n\\n    function setBeneficiary(address _beneficiary) public onlyOwner {\\n        beneficiary = _beneficiary;\\n        emit BeneficiarySet(_beneficiary);\\n    }\\n\\n    function setFeeNumerator(uint256 _feeNumerator) public onlyOwner {\\n        feeNumerator = _feeNumerator;\\n        emit FeeNumeratorSet(_feeNumerator);\\n    }\\n\\n    function addAddressMapping(address _from, address _to) external onlyOwner {\\n        oracleAddresses[_from] = _to;\\n        emit OracleAddressMappingSet(_from, _to);\\n    }\\n\\n    // Views\\n\\n    function calculateAmountToWithdraw(UserOrder memory order)\\n        public\\n        view\\n        returns (uint256 amountToWithdraw, uint256 finalPeriod)\\n    {\\n        SwapOrder storage swapOrder = swapOrders[address(order.sellToken)][\\n            address(order.buyToken)\\n        ];\\n        finalPeriod = Math.min(\\n            swapOrder.lastPeriod,\\n            order.startingPeriod + order.numberOfSwaps - 1\\n        );\\n        amountToWithdraw = 0;\\n        for (\\n            uint256 period = order.lastPeriodWithdrawal + 1;\\n            period <= finalPeriod;\\n            period++\\n        ) {\\n            uint256 periodSwapAmount = (swapOrder.swapExchangeRates[period] *\\n                order.amountPerSwap) / 1e18;\\n            uint256 fee = (periodSwapAmount * feeNumerator) / FEE_DENOMINATOR;\\n            amountToWithdraw += periodSwapAmount - fee;\\n        }\\n    }\\n\\n    function calculateAmountWithdrawn(UserOrder memory order)\\n        public\\n        view\\n        returns (uint256 amountWithdrawn)\\n    {\\n        SwapOrder storage swapOrder = swapOrders[address(order.sellToken)][\\n            address(order.buyToken)\\n        ];\\n\\n        amountWithdrawn = 0;\\n        for (\\n            uint256 period = order.startingPeriod;\\n            period <= order.lastPeriodWithdrawal;\\n            period++\\n        ) {\\n            uint256 periodWithdrawAmount = (swapOrder.swapExchangeRates[\\n                period\\n            ] * order.amountPerSwap) / 1e18;\\n            uint256 fee = (periodWithdrawAmount * feeNumerator) /\\n                FEE_DENOMINATOR;\\n            amountWithdrawn += periodWithdrawAmount - fee;\\n        }\\n    }\\n\\n    function getUserOrders(address userAddress)\\n        external\\n        view\\n        returns (UserOrder[] memory)\\n    {\\n        return orders[userAddress];\\n    }\\n\\n    function getUserOrdersWithExtras(address userAddress)\\n        external\\n        view\\n        returns (\\n            UserOrder[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256\\n        )\\n    {\\n        UserOrder[] memory userOrders = orders[userAddress];\\n        uint256[] memory ordersLastPeriod = new uint256[](userOrders.length);\\n        uint256[] memory amountsToWithdraw = new uint256[](userOrders.length);\\n        uint256[] memory amountsWithdrawn = new uint256[](userOrders.length);\\n\\n        for (uint256 i = 0; i < userOrders.length; i++) {\\n            UserOrder memory order = userOrders[i];\\n            (\\n                uint256 amountToWithdraw,\\n                uint256 finalPeriod\\n            ) = calculateAmountToWithdraw(order);\\n            ordersLastPeriod[i] = finalPeriod;\\n            amountsToWithdraw[i] = amountToWithdraw;\\n            amountsWithdrawn[i] = calculateAmountWithdrawn(order);\\n        }\\n\\n        return (\\n            userOrders,\\n            ordersLastPeriod,\\n            amountsToWithdraw,\\n            amountsWithdrawn,\\n            getCurrentPeriod()\\n        );\\n    }\\n\\n    function getOrder(address userAddress, uint256 index)\\n        external\\n        view\\n        returns (UserOrder memory)\\n    {\\n        return orders[userAddress][index];\\n    }\\n\\n    function getSwapOrderAmountToReduce(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _period\\n    ) external view returns (uint256) {\\n        return swapOrders[_sellToken][_buyToken].amountsToReduce[_period];\\n    }\\n\\n    function getSwapOrderExchangeRate(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _period\\n    ) external view returns (uint256) {\\n        return swapOrders[_sellToken][_buyToken].swapExchangeRates[_period];\\n    }\\n\\n    function getOracleTokenAddress(address token)\\n        public\\n        view\\n        returns (address)\\n    {\\n        address mappedToken = oracleAddresses[token];\\n        if (mappedToken != address(0)) {\\n            return mappedToken;\\n        } else {\\n            return token;\\n        }\\n    }\\n\\n    function getCurrentPeriod() public view returns (uint256 period) {\\n        period = block.number / BLOCKS_PER_DAY;\\n    }\\n}\\n\",\"keccak256\":\"0x25653930b9e42d70fc2d2fdf5a02b011c64e953340b37a9a5994d5d07ebff99d\",\"license\":\"Unlicense\"},\"contracts/SwapExecutor.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISwappaRouter.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\nimport \\\"./DCA.sol\\\";\\n\\ncontract SwapExecutor is ISwapper, Ownable {\\n    event BeneficiarySet(address newBeneficiary);\\n\\n    DCA private dca;\\n    ISwappaRouterV1 private swappaRouter;\\n    address public beneficiary;\\n\\n    constructor(\\n        DCA _dca,\\n        ISwappaRouterV1 _swappaRouter,\\n        address _beneficiary\\n    ) {\\n        dca = _dca;\\n        swappaRouter = _swappaRouter;\\n        setBeneficiary(_beneficiary);\\n    }\\n\\n    function setBeneficiary(address _beneficiary) public onlyOwner {\\n        beneficiary = _beneficiary;\\n        emit BeneficiarySet(_beneficiary);\\n    }\\n\\n    function executeMezumoSwap(\\n        uint256 period,\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras\\n    ) external {\\n        bytes memory params = abi.encode(path, pairs, extras);\\n        dca.executeOrder(\\n            path[0],\\n            path[path.length - 1],\\n            period,\\n            address(this),\\n            params\\n        );\\n    }\\n\\n    function swap(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _inAmount,\\n        uint256 _outAmount,\\n        bytes calldata _params\\n    ) external {\\n        (\\n            address[] memory path,\\n            address[] memory pairs,\\n            bytes[] memory extras\\n        ) = abi.decode(_params, (address[], address[], bytes[]));\\n\\n        require(\\n            IERC20(_sellToken).approve(address(swappaRouter), _inAmount),\\n            \\\"SwapExecutor: Approval to Swappa failed\\\"\\n        );\\n        swappaRouter.swapExactInputForOutput(\\n            path,\\n            pairs,\\n            extras,\\n            _inAmount,\\n            _outAmount,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        require(\\n            IERC20(_buyToken).transfer(address(dca), _outAmount),\\n            \\\"SwapExecutor: Transfer to DCA failed\\\"\\n        );\\n        require(\\n            IERC20(_buyToken).transfer(\\n                beneficiary,\\n                IERC20(_buyToken).balanceOf(address(this))\\n            ),\\n            \\\"SwapExecutor: Transfer to DCA failed\\\"\\n        );\\n    }\\n\\n    function emergency(IERC20 token) external {\\n        require(\\n            token.transfer(beneficiary, token.balanceOf(address(this))),\\n            \\\"SwapExecutor: Emergency withdrawal failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x364dae9360d94cf2c4e6c70e092362508ff6e9445333db846bbebc4d044dcd59\",\"license\":\"Unlicense\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface Oracle {\\n    function consult(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut\\n    ) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x8dd212f98a48f8f21309dc63a3d24fc7ea9cc7de3d256e20f5cc35ebff1b0236\"},\"contracts/interfaces/ISwappaRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISwappaRouterV1 {\\n    function getOutputAmount(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount\\n    ) external view returns (uint256 outputAmount);\\n\\n    function swapExactInputForOutput(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 outputAmount);\\n\\n    function swapExactInputForOutputWithPrecheck(\\n        address[] calldata path,\\n        address[] calldata pairs,\\n        bytes[] calldata extras,\\n        uint256 inputAmount,\\n        uint256 minOutputAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 outputAmount);\\n}\\n\",\"keccak256\":\"0x61618bfb87ceff6281fde3c1f50e6363d21fec0ec669c7909e68364f07affc1e\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface ISwapper {\\n    function swap(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _inAmount,\\n        uint256 _outAmount,\\n        bytes calldata _params\\n    ) external;\\n}\\n\",\"keccak256\":\"0xee1d78e67fe71cb4c4af76a9b0851c8398a479be89dd654632fa2ac66e3d7709\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6080346200008b57601f620015ed38819003918201601f19168301916001600160401b0383118484101762000090578084926060946040528339810103126200008b5780516200007b916200005482620000a6565b60406020820151916200006783620000a6565b0151916200007583620000a6565b620000b8565b60405161149d9081620001508239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116036200008b57565b907f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24926020926000549160018060a01b03199233848216176000556040519460018060a01b0380948193823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060008ba3168560015416176001551683600254161760025516809160035416176003558152a156fe60806040526004361015610013575b600080fd5b6000803560e01c9081631c31f710146100b6575080632506c018146100ad57806338af3eed146100a457806345941ee01461009b5780635dbd944c14610092578063715018a6146100895780638da5cb5b146100805763f2fde38b1461007857600080fd5b61000e6107cf565b5061000e61077c565b5061000e6106d7565b5061000e610462565b5061000e610285565b5061000e610232565b5061000e610190565b3461016f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016f577f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24602060043561011481610172565b73ffffffffffffffffffffffffffffffffffffffff906101388286541633146108c3565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006003541617600355604051908152a1604051f35b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356101cc81610172565b6024356101d881610172565b6084359167ffffffffffffffff9182841161000e573660238501121561000e57836004013592831161000e57366024848601011161000e576024610225940191606435916044359161105c565b005b600091031261000e57565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57806103a06102259273ffffffffffffffffffffffffffffffffffffffff6004356102df81610172565b166102ff60035473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291908383602481855afa928315610424575b6000936103f5575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af19182156103e8575b6000926103bb575b50506113dc565b6103da9250803d106103e1575b6103d28183610a7c565b810190610df6565b38806103b4565b503d6103c8565b6103f0610c22565b6103ac565b610416919350843d861161041d575b61040e8183610a7c565b810190610e99565b9138610345565b503d610404565b61042c610c22565b61033d565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5767ffffffffffffffff60243581811161000e576104b3903690600401610431565b909160443581811161000e576104cd903690600401610431565b60643583811161000e576104e990939291933690600401610431565b939060405194859261053d60209160608387015261050b608087018b8d610997565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09788888403016040890152610997565b8585820301606086015282815281810196828460051b83010197856000935b86851061065c57505050505050505061057b9203908101835282610a7c565b6105df6105ca6105bc6105a360015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b946105cf6105ca8683610abd565b610b05565b946105d981610b12565b91610af5565b92803b1561000e5761062b9360008094604051968795869485937f06dc1f6a00000000000000000000000000000000000000000000000000000000855230916004359160048701610bdd565b03925af1801561064f575b61063c57005b8061064961022592610a5b565b80610227565b610657610c22565b610636565b919395975091939597988982820301845288357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181121561000e57830190813586811161000e57803603851361000e576106c18992839283600196016109ec565b9a0194019501929593918a97959199989961055c565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016f5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161074e3384146108c3565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561080b81610172565b73ffffffffffffffffffffffffffffffffffffffff61082f816000541633146108c3565b81161561083f5761022590610928565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b156108ca57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b91908082526020809201929160005b8281106109b4575050505090565b90919293828060019273ffffffffffffffffffffffffffffffffffffffff88356109dd81610172565b168152019501939291016109a6565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111610a6f57604052565b610a77610a2b565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610a6f57604052565b9015610ac65790565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015610ac65760051b0190565b35610b0f81610172565b90565b60018110610b3f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908251928382526000905b848210610bc55750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610bb8575b0116010190565b6000858286010152610bb1565b90602090818082850101519082860101520190610b7a565b91909360a093610b0f969573ffffffffffffffffffffffffffffffffffffffff9384809216865216602085015260408401521660608201528160808201520190610b6e565b506040513d6000823e3d90fd5b60209067ffffffffffffffff8111610c49575b60051b0190565b610c51610a2b565b610c42565b81601f8201121561000e57803591610c6d83610c2f565b92610c7b6040519485610a7c565b808452602092838086019260051b82010192831161000e578301905b828210610ca5575050505090565b8380918335610cb381610172565b815201910190610c97565b909160608284031261000e5767ffffffffffffffff91803583811161000e5784610ce9918301610c56565b936020908183013585811161000e5781610d04918501610c56565b94604093848101359082821161000e570191601f81818501121561000e57833591610d2e83610c2f565b96610d3b81519889610a7c565b838852868089019460051b8701019582871161000e57878101945b878610610d695750505050505050505090565b853587811161000e57820184603f8201121561000e578981013591888311610de9575b8451610dbe8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a8701160182610a7c565b8381528686858501011161000e5760008c858196898397018386013783010152815201950194610d56565b610df1610a2b565b610d8c565b9081602091031261000e5751801515810361000e5790565b15610e1557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537761704578656375746f723a20417070726f76616c20746f2053776170706160448201527f206661696c6564000000000000000000000000000000000000000000000000006064820152fd5b9081602091031261000e575190565b90815180825260208080930193019160005b828110610ec8575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610eba565b94929190610f10610f1f91999897959960e0885260e0880190610ea8565b60209287820384890152610ea8565b9085820360408701528251908183528083019281808460051b8301019501936000915b848310610f865750505050505091610f829160c09493976060850152608084015260a083019073ffffffffffffffffffffffffffffffffffffffff169052565b0152565b9091929394958480610fc2837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086600196030187528a51610b6e565b9801930193019194939290610f42565b15610fd957565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f537761704578656375746f723a205472616e7366657220746f2044434120666160448201527f696c6564000000000000000000000000000000000000000000000000000000006064820152fd5b938395810161106a91610cbe565b969195909260025461108f9073ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024810186905296879660209687968792918a60448101038460009d8e92818473ffffffffffffffffffffffffffffffffffffffff809d165af19d8e156113069f6112ed9e611143926113cf575b84916113b2575b50610e0e565b6111a36111686105a360025473ffffffffffffffffffffffffffffffffffffffff1690565b94604051988997889687957f0862d12f0000000000000000000000000000000000000000000000000000000087524294309460048901610ef2565b03925af180156113a5575b611388575b5016611252611237846111de6105a360015473ffffffffffffffffffffffffffffffffffffffff1690565b94604051809381927fa9059cbb0000000000000000000000000000000000000000000000000000000098898452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818b875af190811561137b575b889161135e575b50610fd2565b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529273ffffffffffffffffffffffffffffffffffffffff9091169087908585602481875afa948515611351575b8295611332575b50604051978895869485938452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1928315611325575b92611308575b5050610fd2565b565b61131e9250803d106103e1576103d28183610a7c565b38806112ff565b61132d610c22565b6112f9565b61134a919550863d881161041d5761040e8183610a7c565b93386112b4565b611359610c22565b6112ad565b6113759150853d87116103e1576103d28183610a7c565b3861124c565b611383610c22565b611245565b61139e90853d871161041d5761040e8183610a7c565b50386111b3565b6113ad610c22565b6111ae565b6113c99150883d8a116103e1576103d28183610a7c565b3861113d565b6113d7610c22565b611136565b156113e357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f537761704578656375746f723a20456d657267656e637920776974686472617760448201527f616c206661696c656400000000000000000000000000000000000000000000006064820152fdfea2646970667358221220cf60f52df0f3d30174712412c59cd419d731a020d1e190e5b0894f3264fbdf8c64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c9081631c31f710146100b6575080632506c018146100ad57806338af3eed146100a457806345941ee01461009b5780635dbd944c14610092578063715018a6146100895780638da5cb5b146100805763f2fde38b1461007857600080fd5b61000e6107cf565b5061000e61077c565b5061000e6106d7565b5061000e610462565b5061000e610285565b5061000e610232565b5061000e610190565b3461016f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016f577f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24602060043561011481610172565b73ffffffffffffffffffffffffffffffffffffffff906101388286541633146108c3565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006003541617600355604051908152a1604051f35b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356101cc81610172565b6024356101d881610172565b6084359167ffffffffffffffff9182841161000e573660238501121561000e57836004013592831161000e57366024848601011161000e576024610225940191606435916044359161105c565b005b600091031261000e57565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60035416604051908152f35b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57806103a06102259273ffffffffffffffffffffffffffffffffffffffff6004356102df81610172565b166102ff60035473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015291908383602481855afa928315610424575b6000936103f5575b5060006040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af19182156103e8575b6000926103bb575b50506113dc565b6103da9250803d106103e1575b6103d28183610a7c565b810190610df6565b38806103b4565b503d6103c8565b6103f0610c22565b6103ac565b610416919350843d861161041d575b61040e8183610a7c565b810190610e99565b9138610345565b503d610404565b61042c610c22565b61033d565b9181601f8401121561000e5782359167ffffffffffffffff831161000e576020808501948460051b01011161000e57565b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5767ffffffffffffffff60243581811161000e576104b3903690600401610431565b909160443581811161000e576104cd903690600401610431565b60643583811161000e576104e990939291933690600401610431565b939060405194859261053d60209160608387015261050b608087018b8d610997565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09788888403016040890152610997565b8585820301606086015282815281810196828460051b83010197856000935b86851061065c57505050505050505061057b9203908101835282610a7c565b6105df6105ca6105bc6105a360015473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b946105cf6105ca8683610abd565b610b05565b946105d981610b12565b91610af5565b92803b1561000e5761062b9360008094604051968795869485937f06dc1f6a00000000000000000000000000000000000000000000000000000000855230916004359160048701610bdd565b03925af1801561064f575b61063c57005b8061064961022592610a5b565b80610227565b610657610c22565b610636565b919395975091939597988982820301845288357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181121561000e57830190813586811161000e57803603851361000e576106c18992839283600196016109ec565b9a0194019501929593918a97959199989961055c565b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016f5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff82169161074e3384146108c3565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561080b81610172565b73ffffffffffffffffffffffffffffffffffffffff61082f816000541633146108c3565b81161561083f5761022590610928565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b156108ca57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b91908082526020809201929160005b8281106109b4575050505090565b90919293828060019273ffffffffffffffffffffffffffffffffffffffff88356109dd81610172565b168152019501939291016109a6565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111610a6f57604052565b610a77610a2b565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610a6f57604052565b9015610ac65790565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015610ac65760051b0190565b35610b0f81610172565b90565b60018110610b3f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91908251928382526000905b848210610bc55750601f84602094957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09311610bb8575b0116010190565b6000858286010152610bb1565b90602090818082850101519082860101520190610b7a565b91909360a093610b0f969573ffffffffffffffffffffffffffffffffffffffff9384809216865216602085015260408401521660608201528160808201520190610b6e565b506040513d6000823e3d90fd5b60209067ffffffffffffffff8111610c49575b60051b0190565b610c51610a2b565b610c42565b81601f8201121561000e57803591610c6d83610c2f565b92610c7b6040519485610a7c565b808452602092838086019260051b82010192831161000e578301905b828210610ca5575050505090565b8380918335610cb381610172565b815201910190610c97565b909160608284031261000e5767ffffffffffffffff91803583811161000e5784610ce9918301610c56565b936020908183013585811161000e5781610d04918501610c56565b94604093848101359082821161000e570191601f81818501121561000e57833591610d2e83610c2f565b96610d3b81519889610a7c565b838852868089019460051b8701019582871161000e57878101945b878610610d695750505050505050505090565b853587811161000e57820184603f8201121561000e578981013591888311610de9575b8451610dbe8c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08a8701160182610a7c565b8381528686858501011161000e5760008c858196898397018386013783010152815201950194610d56565b610df1610a2b565b610d8c565b9081602091031261000e5751801515810361000e5790565b15610e1557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f537761704578656375746f723a20417070726f76616c20746f2053776170706160448201527f206661696c6564000000000000000000000000000000000000000000000000006064820152fd5b9081602091031261000e575190565b90815180825260208080930193019160005b828110610ec8575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610eba565b94929190610f10610f1f91999897959960e0885260e0880190610ea8565b60209287820384890152610ea8565b9085820360408701528251908183528083019281808460051b8301019501936000915b848310610f865750505050505091610f829160c09493976060850152608084015260a083019073ffffffffffffffffffffffffffffffffffffffff169052565b0152565b9091929394958480610fc2837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086600196030187528a51610b6e565b9801930193019194939290610f42565b15610fd957565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f537761704578656375746f723a205472616e7366657220746f2044434120666160448201527f696c6564000000000000000000000000000000000000000000000000000000006064820152fd5b938395810161106a91610cbe565b969195909260025461108f9073ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024810186905296879660209687968792918a60448101038460009d8e92818473ffffffffffffffffffffffffffffffffffffffff809d165af19d8e156113069f6112ed9e611143926113cf575b84916113b2575b50610e0e565b6111a36111686105a360025473ffffffffffffffffffffffffffffffffffffffff1690565b94604051988997889687957f0862d12f0000000000000000000000000000000000000000000000000000000087524294309460048901610ef2565b03925af180156113a5575b611388575b5016611252611237846111de6105a360015473ffffffffffffffffffffffffffffffffffffffff1690565b94604051809381927fa9059cbb0000000000000000000000000000000000000000000000000000000098898452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03818b875af190811561137b575b889161135e575b50610fd2565b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529273ffffffffffffffffffffffffffffffffffffffff9091169087908585602481875afa948515611351575b8295611332575b50604051978895869485938452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af1928315611325575b92611308575b5050610fd2565b565b61131e9250803d106103e1576103d28183610a7c565b38806112ff565b61132d610c22565b6112f9565b61134a919550863d881161041d5761040e8183610a7c565b93386112b4565b611359610c22565b6112ad565b6113759150853d87116103e1576103d28183610a7c565b3861124c565b611383610c22565b611245565b61139e90853d871161041d5761040e8183610a7c565b50386111b3565b6113ad610c22565b6111ae565b6113c99150883d8a116103e1576103d28183610a7c565b3861113d565b6113d7610c22565b611136565b156113e357565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f537761704578656375746f723a20456d657267656e637920776974686472617760448201527f616c206661696c656400000000000000000000000000000000000000000000006064820152fdfea2646970667358221220cf60f52df0f3d30174712412c59cd419d731a020d1e190e5b0894f3264fbdf8c64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SwapExecutor.sol:SwapExecutor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2186,
        "contract": "contracts/SwapExecutor.sol:SwapExecutor",
        "label": "dca",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(DCA)2168"
      },
      {
        "astId": 2189,
        "contract": "contracts/SwapExecutor.sol:SwapExecutor",
        "label": "swappaRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ISwappaRouterV1)2478"
      },
      {
        "astId": 2191,
        "contract": "contracts/SwapExecutor.sol:SwapExecutor",
        "label": "beneficiary",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(DCA)2168": {
        "encoding": "inplace",
        "label": "contract DCA",
        "numberOfBytes": "20"
      },
      "t_contract(ISwappaRouterV1)2478": {
        "encoding": "inplace",
        "label": "contract ISwappaRouterV1",
        "numberOfBytes": "20"
      }
    }
  }
}