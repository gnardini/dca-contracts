{
  "address": "0x4a67A2f4C466Fda84e53eE2632E1fC0B77a9c80B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Oracle",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "BeneficiarySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeNumerator",
          "type": "uint256"
        }
      ],
      "name": "FeeNumeratorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracleUpdater",
          "type": "address"
        }
      ],
      "name": "OracleUpdaterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPerSwap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberOfSwaps",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startingPeriod",
          "type": "uint256"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RemainingWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "SwapExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SwappedWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        }
      ],
      "name": "TokenPairInitialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BLOCKS_PER_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfSwaps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastPeriodWithdrawal",
              "type": "uint256"
            }
          ],
          "internalType": "struct DCA.UserOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "calculateAmountToWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountPerSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfSwaps",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "emergencyWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_swapper",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_params",
          "type": "bytes"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "getPeriodSwapState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "exchangeRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountToReduce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeNumerator",
              "type": "uint256"
            }
          ],
          "internalType": "struct DCA.PeriodSwapState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        }
      ],
      "name": "getSwapState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountToSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastSwapPeriod",
              "type": "uint256"
            }
          ],
          "internalType": "struct DCA.SwapState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountPerSwap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numberOfSwaps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastPeriodWithdrawal",
              "type": "uint256"
            }
          ],
          "internalType": "struct DCA.UserOrder[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardrailsOn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract Oracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleUpdater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountPerSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfSwaps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastPeriodWithdrawal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "periodsSwapStates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToReduce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeNumerator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeNumerator",
          "type": "uint256"
        }
      ],
      "name": "setFeeNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Oracle",
          "name": "_newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOracleUpdater",
          "type": "address"
        }
      ],
      "name": "setOracleUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swapStates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToSwap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastSwapPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "turnOffGuardrails",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "withdrawSwapped",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x91f05a00701cd1c338fc3ae53e7ee9529e1ebb9c689fc014f6f27ce13bdd94d4",
  "receipt": {
    "to": null,
    "from": "0xe59f139acBAB76d41623870F89f107d26Cf1E2B8",
    "contractAddress": "0x4a67A2f4C466Fda84e53eE2632E1fC0B77a9c80B",
    "transactionIndex": 1,
    "gasUsed": "2634082",
    "logsBloom": "0x0000000000000000000000000000000000000000000000000080000000000000000000000000000001000000000000000000000000000000000010000000000000000000000000000000000000000000000100000000000000000000000000000000004002000000000000004000080000000000000000000000000008000040a000000000000000000000002000000000000000000000000004000000000000000000000000000080000000000000000000000000200000000000000000000000000000000000000000000000400000000000000000000000000000000020000000400000000000000000800000000000000000000000000000000800000000",
    "blockHash": "0x333c441761428c483d40344bbe0101f139e2adc695a37e9d2dbaa6bcaf8cd05f",
    "transactionHash": "0x91f05a00701cd1c338fc3ae53e7ee9529e1ebb9c689fc014f6f27ce13bdd94d4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13781825,
        "transactionHash": "0x91f05a00701cd1c338fc3ae53e7ee9529e1ebb9c689fc014f6f27ce13bdd94d4",
        "address": "0x4a67A2f4C466Fda84e53eE2632E1fC0B77a9c80B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e59f139acbab76d41623870f89f107d26cf1e2b8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x333c441761428c483d40344bbe0101f139e2adc695a37e9d2dbaa6bcaf8cd05f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13781825,
        "transactionHash": "0x91f05a00701cd1c338fc3ae53e7ee9529e1ebb9c689fc014f6f27ce13bdd94d4",
        "address": "0x4a67A2f4C466Fda84e53eE2632E1fC0B77a9c80B",
        "topics": [
          "0x3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa"
        ],
        "data": "0x000000000000000000000000f00979c09ac0c2e825d82480272cc91398e57cd6",
        "logIndex": 1,
        "blockHash": "0x333c441761428c483d40344bbe0101f139e2adc695a37e9d2dbaa6bcaf8cd05f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13781825,
        "transactionHash": "0x91f05a00701cd1c338fc3ae53e7ee9529e1ebb9c689fc014f6f27ce13bdd94d4",
        "address": "0x4a67A2f4C466Fda84e53eE2632E1fC0B77a9c80B",
        "topics": [
          "0x04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24"
        ],
        "data": "0x000000000000000000000000aca6fbe30f1557004d261e2d905b82571ac9bab7",
        "logIndex": 2,
        "blockHash": "0x333c441761428c483d40344bbe0101f139e2adc695a37e9d2dbaa6bcaf8cd05f"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13781825,
        "transactionHash": "0x91f05a00701cd1c338fc3ae53e7ee9529e1ebb9c689fc014f6f27ce13bdd94d4",
        "address": "0x4a67A2f4C466Fda84e53eE2632E1fC0B77a9c80B",
        "topics": [
          "0xc1bcceddd77fdc95a8da9bec5802d2e0bb564dd02c0730222d8e12030bd91043"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000fa0",
        "logIndex": 3,
        "blockHash": "0x333c441761428c483d40344bbe0101f139e2adc695a37e9d2dbaa6bcaf8cd05f"
      }
    ],
    "blockNumber": 13781825,
    "cumulativeGasUsed": "2658622",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF00979c09aC0c2e825d82480272cC91398e57cd6",
    "0xaCa6FBe30f1557004D261e2D905b82571aC9Bab7",
    4000
  ],
  "numDeployments": 15,
  "solcInputHash": "43aa4d3dc1a09f9946873c9e16e76b3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Oracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"BeneficiarySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"}],\"name\":\"FeeNumeratorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracleUpdater\",\"type\":\"address\"}],\"name\":\"OracleUpdaterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfSwaps\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingPeriod\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemainingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwappedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"TokenPairInitialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfSwaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPeriodWithdrawal\",\"type\":\"uint256\"}],\"internalType\":\"struct DCA.UserOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"calculateAmountToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfSwaps\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getPeriodSwapState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToReduce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"}],\"internalType\":\"struct DCA.PeriodSwapState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"getSwapState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSwapPeriod\",\"type\":\"uint256\"}],\"internalType\":\"struct DCA.SwapState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfSwaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPeriodWithdrawal\",\"type\":\"uint256\"}],\"internalType\":\"struct DCA.UserOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardrailsOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountPerSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfSwaps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPeriodWithdrawal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periodsSwapStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToReduce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeNumerator\",\"type\":\"uint256\"}],\"name\":\"setFeeNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Oracle\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracleUpdater\",\"type\":\"address\"}],\"name\":\"setOracleUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swapStates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSwapPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOffGuardrails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdrawSwapped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"To perform the swaps, we aggregate the tokens for all the users and make one big swap instead of many small ones.\",\"kind\":\"dev\",\"methods\":{\"createOrder(address,address,uint256,uint256)\":{\"params\":{\"_amountPerSwap\":\"amount of _sellToken to sell each period.\",\"_buyToken\":\"token to buy on each period.\",\"_numberOfSwaps\":\"number of periods to do the swapping.\",\"_sellToken\":\"token to sell on each period.\"}},\"executeOrder(address,address,uint256,address,bytes)\":{\"params\":{\"_buyToken\":\"token to buy on the swap.\",\"_params\":\"params to send to |_swapper| for performing the swap.\",\"_period\":\"period to perform the swap for. It has only one possible valid value, so it is not strictly necessary.\",\"_sellToken\":\"token to sell on the swap.\",\"_swapper\":\"address that will perform the swap.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAll(uint256)\":{\"params\":{\"index\":\"the index of the |orders| array for msg.sender.\"}},\"withdrawSwapped(uint256)\":{\"params\":{\"index\":\"the index of the |orders| array for msg.sender.\"}}},\"title\":\"DCA This contract allows users to deposit one token and gradually swaps it for another one every day at the price it's trading at, allowing user to buy the target token using a Dollar-Cost Averaging (DCA) strategy.\",\"version\":1},\"userdoc\":{\"events\":{\"RemainingWithdrawal(address,uint256,address,uint256)\":{\"notice\":\"Emitted when a user withdraws their principal early. ie. before it was swapped.\"},\"SwappedWithdrawal(address,uint256,address,uint256)\":{\"notice\":\"Emitted when a user withdraws the funds that were already swapped.\"}},\"kind\":\"user\",\"methods\":{\"BLOCKS_PER_DAY()\":{\"notice\":\"Number of blocks in a day assuming 5 seconds per block. Works for the Celo blockchain.\"},\"MAX_FEE_NUMERATOR()\":{\"notice\":\"Upper limit of the fee that can be charged on swaps. Has to be divided by |FEE_DENOMINATOR|. Equivalent to 60bps.\"},\"beneficiary()\":{\"notice\":\"Where to send the fees.\"},\"calculateAmountToWithdraw((address,address,uint256,uint256,uint256,uint256))\":{\"notice\":\"Calculates hoy much |buyToken| is available to withdraw for a user order. Takes into account previous withdrawals and fee taken.\"},\"createOrder(address,address,uint256,uint256)\":{\"notice\":\"Starts a new DCA position for the |msg.sender|. When creating a new position, we add the |_amountPerSwap| to the |amountToSwap| variable on |SwapState| and to |amountToReduce| on the final period's |PeriodSwapState|. Thus, the amount to swap daily will increase between the current period and the final one.\"},\"emergencyWithdrawal(address,address)\":{\"notice\":\"In case of emergency, in the beginning the owner can remove the funds to return them to users. Should be turned off before receiving any meaningful deposits by calling |turnOffGuardrails|.\"},\"executeOrder(address,address,uint256,address,bytes)\":{\"notice\":\"Executes a swap between two tokens. The period must be the last executed + 1. The swapping is done by the |_swapper|. We calculate the required exchange rate using an oracle, send them the funds to swap and expect them to return the calculated return amount. This allows us to more easily add pairs since we just need the oracle support, not the exact routes to follow. Callers are incentivized to call this function for the arbitrage opportunity. In other words, the general logic followed here is: - Calculate and send the fee to the |beneficiary|. - Calculate the exchange rate using |oracle|. - Send the swap amount to |_swapper| can call its |swap| function. - Check that it returned the required funds taking the exchange rate into account.\"},\"feeNumerator()\":{\"notice\":\"Active fee on swaps. To be used together with |FEE_DENOMINATOR|.\"},\"guardrailsOn()\":{\"notice\":\"If true, the owner can withdraw funds. Should be turned off after there is sufficient confidence in the code, for example after audits.\"},\"oracle()\":{\"notice\":\"Oracle to use to get the amount to receive on swaps.\"},\"oracleUpdater()\":{\"notice\":\"Address that can update the oracle. Matches the owner at first, but should be operated by the community after a while.\"},\"orders(address,uint256)\":{\"notice\":\"A list of |UserOrder| for each user address.\"},\"periodsSwapStates(address,address,uint256)\":{\"notice\":\"Contains information related to swaps for a (sellToken, buyToken, period) tuple. See |PeriodSwapState| for more info.\"},\"setBeneficiary(address)\":{\"notice\":\"Update the beneficiary\"},\"setFeeNumerator(uint256)\":{\"notice\":\"Update the fee\"},\"setOracle(address)\":{\"notice\":\"Update the oracle\"},\"setOracleUpdater(address)\":{\"notice\":\"Change the address that can update the oracle.\"},\"swapStates(address,address)\":{\"notice\":\"Contains the state of a token pair swaps. For a given (sellToken, buyToken) it contains how much it should swap in the next period and when the last period was.\"},\"withdrawAll(uint256)\":{\"notice\":\"Withdraw the funds that were already swapped for the caller user AND the funds that were not swapped yet, effectively terminating the position.\"},\"withdrawSwapped(uint256)\":{\"notice\":\"Withdraw the funds that were already swapped for the caller user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DCA.sol\":\"DCA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"contracts/DCA.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/ISwapper.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\n/// @title DCA\\n/// This contract allows users to deposit one token and gradually swaps it for another one\\n/// every day at the price it's trading at, allowing user to buy the target token using a\\n/// Dollar-Cost Averaging (DCA) strategy.\\n/// @dev To perform the swaps, we aggregate the tokens for all the users and make one big\\n/// swap instead of many small ones.\\ncontract DCA is Ownable {\\n    /// Number of blocks in a day assuming 5 seconds per block. Works for the Celo blockchain.\\n    uint256 public constant BLOCKS_PER_DAY = 17280;\\n    /// Upper limit of the fee that can be charged on swaps. Has to be divided by\\n    /// |FEE_DENOMINATOR|. Equivalent to 60bps.\\n    uint256 public constant MAX_FEE_NUMERATOR = 6_000;\\n    uint256 public constant FEE_DENOMINATOR = 1_000_000;\\n\\n    event OrderCreated(\\n        address indexed userAddress,\\n        uint256 index,\\n        IERC20 indexed sellToken,\\n        IERC20 indexed buyToken,\\n        uint256 amountPerSwap,\\n        uint256 numberOfSwaps,\\n        uint256 startingPeriod\\n    );\\n    event SwapExecuted(\\n        address indexed sellToken,\\n        address indexed buyToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        uint256 indexed period\\n    );\\n    /// Emitted when a user withdraws the funds that were already swapped.\\n    event SwappedWithdrawal(\\n        address indexed userAddress,\\n        uint256 indexed index,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    /// Emitted when a user withdraws their principal early. ie. before it was swapped.\\n    event RemainingWithdrawal(\\n        address indexed userAddress,\\n        uint256 indexed index,\\n        address indexed token,\\n        uint256 amount\\n    );\\n    event TokenPairInitialized(address sellToken, address buyToken);\\n    event EmergencyWithdrawal(address token, uint256 amount, address to);\\n    event OracleUpdaterChanged(address oracleUpdater);\\n    event OracleSet(address oracle);\\n    event BeneficiarySet(address newBeneficiary);\\n    event FeeNumeratorSet(uint256 feeNumerator);\\n\\n    /// Contains information about one specific user order.\\n    /// A period is defined as a block number divided by |BLOCKS_PER_DAY|.\\n    struct UserOrder {\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        uint256 amountPerSwap;\\n        uint256 numberOfSwaps;\\n        uint256 startingPeriod;\\n        uint256 lastPeriodWithdrawal;\\n    }\\n\\n    /// Contains information about the swapping status of a token pair.\\n    struct SwapState {\\n        uint256 amountToSwap;\\n        uint256 lastSwapPeriod;\\n    }\\n\\n    /// For a given (sellToken, buyToken, period) tuple it returns the exchange rate used (if\\n    /// the period is in the past), how many daily swap tokens have their last day on that period\\n    /// and the fee charged in the period if it's in the past.\\n    struct PeriodSwapState {\\n        /// For each past period, what exchange rate was used.\\n        uint256 exchangeRate;\\n        /// For each future period, how much to reduce to |amountToSwap| in its SwapState.\\n        uint256 amountToReduce;\\n        /// For past periods, the fee numerator used on the swap.\\n        uint256 feeNumerator;\\n    }\\n\\n    /// Contains the state of a token pair swaps. For a given (sellToken, buyToken)\\n    /// it contains how much it should swap in the next period and when the last period was.\\n    mapping(address => mapping(address => SwapState)) public swapStates;\\n    /// Contains information related to swaps for a (sellToken, buyToken, period) tuple.\\n    /// See |PeriodSwapState| for more info.\\n    mapping(address => mapping(address => mapping(uint256 => PeriodSwapState)))\\n        public periodsSwapStates;\\n    /// A list of |UserOrder| for each user address.\\n    mapping(address => UserOrder[]) public orders;\\n\\n    /// Active fee on swaps. To be used together with |FEE_DENOMINATOR|.\\n    uint256 public feeNumerator;\\n    /// Where to send the fees.\\n    address public beneficiary;\\n    /// Oracle to use to get the amount to receive on swaps.\\n    Oracle public oracle;\\n    /// If true, the owner can withdraw funds. Should be turned off after there is sufficient confidence\\n    /// in the code, for example after audits.\\n    bool public guardrailsOn;\\n    /// Address that can update the oracle. Matches the owner at first, but should be operated by the\\n    /// community after a while.\\n    address public oracleUpdater;\\n\\n    /// @dev Throws if called by any account other than the oracle updater.\\n    modifier onlyOracleUpdater() {\\n        require(\\n            oracleUpdater == msg.sender,\\n            \\\"DCA: caller is not the oracle updater\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        Oracle _oracle,\\n        address _beneficiary,\\n        uint256 initialFee\\n    ) {\\n        guardrailsOn = true;\\n        oracleUpdater = msg.sender;\\n        setOracle(_oracle);\\n        setBeneficiary(_beneficiary);\\n        setFeeNumerator(initialFee);\\n    }\\n\\n    /// Starts a new DCA position for the |msg.sender|. When creating a new position, we\\n    /// add the |_amountPerSwap| to the |amountToSwap| variable on |SwapState| and to\\n    /// |amountToReduce| on the final period's |PeriodSwapState|. Thus, the amount to swap\\n    /// daily will increase between the current period and the final one.\\n    /// @param _sellToken token to sell on each period.\\n    /// @param _buyToken token to buy on each period.\\n    /// @param _amountPerSwap amount of _sellToken to sell each period.\\n    /// @param _numberOfSwaps number of periods to do the swapping.\\n    function createOrder(\\n        IERC20 _sellToken,\\n        IERC20 _buyToken,\\n        uint256 _amountPerSwap,\\n        uint256 _numberOfSwaps\\n    ) external returns (uint256 index) {\\n        require(\\n            _sellToken.transferFrom(\\n                msg.sender,\\n                address(this),\\n                _amountPerSwap * _numberOfSwaps\\n            ),\\n            \\\"DCA: Not enough funds\\\"\\n        );\\n\\n        SwapState storage swapState = swapStates[address(_sellToken)][\\n            address(_buyToken)\\n        ];\\n        // If it's the first order for this pair, initialize it.\\n        if (swapState.lastSwapPeriod == 0) {\\n            swapState.lastSwapPeriod = getCurrentPeriod() - 1;\\n            emit TokenPairInitialized(address(_sellToken), address(_buyToken));\\n        }\\n        uint256 startingPeriod = swapState.lastSwapPeriod + 1;\\n        UserOrder memory newOrder = UserOrder(\\n            _sellToken,\\n            _buyToken,\\n            _amountPerSwap,\\n            _numberOfSwaps,\\n            startingPeriod,\\n            swapState.lastSwapPeriod\\n        );\\n\\n        swapState.amountToSwap += _amountPerSwap;\\n        periodsSwapStates[address(_sellToken)][address(_buyToken)][\\n            startingPeriod + _numberOfSwaps - 1\\n        ].amountToReduce += _amountPerSwap;\\n\\n        index = orders[msg.sender].length;\\n        orders[msg.sender].push(newOrder);\\n\\n        emit OrderCreated(\\n            msg.sender,\\n            index,\\n            _sellToken,\\n            _buyToken,\\n            _amountPerSwap,\\n            _numberOfSwaps,\\n            startingPeriod\\n        );\\n    }\\n\\n    /// Executes a swap between two tokens. The period must be the last executed + 1.\\n    /// The swapping is done by the |_swapper|. We calculate the required exchange rate using\\n    /// an oracle, send them the funds to swap and expect them to return the calculated return\\n    /// amount. This allows us to more easily add pairs since we just need the oracle support,\\n    /// not the exact routes to follow. Callers are incentivized to call this function for\\n    /// the arbitrage opportunity.\\n    ///\\n    /// In other words, the general logic followed here is:\\n    /// - Calculate and send the fee to the |beneficiary|.\\n    /// - Calculate the exchange rate using |oracle|.\\n    /// - Send the swap amount to |_swapper| can call its |swap| function.\\n    /// - Check that it returned the required funds taking the exchange rate into account.\\n    /// @param _sellToken token to sell on the swap.\\n    /// @param _buyToken token to buy on the swap.\\n    /// @param _period period to perform the swap for. It has only one possible valid\\n    /// value, so it is not strictly necessary.\\n    /// @param _swapper address that will perform the swap.\\n    /// @param _params params to send to |_swapper| for performing the swap.\\n    function executeOrder(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _period,\\n        address _swapper,\\n        bytes memory _params\\n    ) external {\\n        SwapState storage swapState = swapStates[_sellToken][_buyToken];\\n        require(swapState.lastSwapPeriod + 1 == _period, \\\"DCA: Invalid period\\\");\\n        require(\\n            _period <= getCurrentPeriod(),\\n            \\\"DCA: Period cannot be in the future\\\"\\n        );\\n        uint256 fee = (swapState.amountToSwap * feeNumerator) / FEE_DENOMINATOR;\\n        uint256 swapAmount = swapState.amountToSwap - fee;\\n\\n        uint256 requiredAmount = oracle.consult(\\n            _sellToken,\\n            swapAmount,\\n            _buyToken\\n        );\\n        require(requiredAmount > 0, \\\"DCA: Oracle failure\\\");\\n\\n        PeriodSwapState storage periodSwapState = periodsSwapStates[_sellToken][\\n            _buyToken\\n        ][_period];\\n\\n        swapState.lastSwapPeriod++;\\n        swapState.amountToSwap -= periodSwapState.amountToReduce;\\n        periodSwapState.exchangeRate = (requiredAmount * 1e27) / swapAmount;\\n        periodSwapState.feeNumerator = feeNumerator;\\n\\n        require(\\n            IERC20(_sellToken).transfer(beneficiary, fee),\\n            \\\"DCA: Fee transfer to beneficiary failed\\\"\\n        );\\n\\n        uint256 balanceBefore = IERC20(_buyToken).balanceOf(address(this));\\n        require(\\n            IERC20(_sellToken).transfer(_swapper, swapAmount),\\n            \\\"DCA: Transfer to Swapper failed\\\"\\n        );\\n        ISwapper(_swapper).swap(\\n            _sellToken,\\n            _buyToken,\\n            swapAmount,\\n            requiredAmount,\\n            _params\\n        );\\n        require(\\n            balanceBefore + requiredAmount <=\\n                IERC20(_buyToken).balanceOf(address(this)),\\n            \\\"DCA: Not enough balance returned\\\"\\n        );\\n\\n        emit SwapExecuted(\\n            _sellToken,\\n            _buyToken,\\n            swapAmount,\\n            requiredAmount,\\n            _period\\n        );\\n    }\\n\\n    /// Withdraw the funds that were already swapped for the caller user.\\n    /// @param index the index of the |orders| array for msg.sender.\\n    function withdrawSwapped(uint256 index) public {\\n        UserOrder storage order = orders[msg.sender][index];\\n        (\\n            uint256 amountToWithdraw,\\n            uint256 finalPeriod\\n        ) = calculateAmountToWithdraw(order);\\n        order.lastPeriodWithdrawal = finalPeriod;\\n\\n        require(\\n            order.buyToken.transfer(msg.sender, amountToWithdraw),\\n            \\\"DCA: Not enough funds to withdraw\\\"\\n        );\\n\\n        emit SwappedWithdrawal(\\n            msg.sender,\\n            index,\\n            address(order.buyToken),\\n            amountToWithdraw\\n        );\\n    }\\n\\n    /// Withdraw the funds that were already swapped for the caller user AND the\\n    /// funds that were not swapped yet, effectively terminating the position.\\n    /// @param index the index of the |orders| array for msg.sender.\\n    function withdrawAll(uint256 index) external {\\n        withdrawSwapped(index);\\n\\n        UserOrder storage order = orders[msg.sender][index];\\n        SwapState storage swapState = swapStates[address(order.sellToken)][\\n            address(order.buyToken)\\n        ];\\n\\n        uint256 finalPeriod = order.startingPeriod + order.numberOfSwaps - 1;\\n\\n        if (finalPeriod > swapState.lastSwapPeriod) {\\n            PeriodSwapState storage finalPeriodSwapState = periodsSwapStates[\\n                address(order.sellToken)\\n            ][address(order.buyToken)][finalPeriod];\\n\\n            swapState.amountToSwap -= order.amountPerSwap;\\n            finalPeriodSwapState.amountToReduce -= order.amountPerSwap;\\n            uint256 amountToWithdraw = order.amountPerSwap *\\n                (finalPeriod - swapState.lastSwapPeriod);\\n            order.lastPeriodWithdrawal = finalPeriod;\\n\\n            require(\\n                order.sellToken.transfer(msg.sender, amountToWithdraw),\\n                \\\"DCA: Not enough funds to withdraw\\\"\\n            );\\n\\n            emit RemainingWithdrawal(\\n                msg.sender,\\n                index,\\n                address(order.sellToken),\\n                amountToWithdraw\\n            );\\n        }\\n    }\\n\\n    function turnOffGuardrails() external onlyOwner {\\n        guardrailsOn = false;\\n    }\\n\\n    /// In case of emergency, in the beginning the owner can remove the funds to return them to users.\\n    /// Should be turned off before receiving any meaningful deposits by calling |turnOffGuardrails|.\\n    function emergencyWithdrawal(IERC20 token, address to) external onlyOwner {\\n        require(guardrailsOn, \\\"DCA: Guardrails are off\\\");\\n        uint256 balance = token.balanceOf(address(this));\\n        require(token.transfer(to, balance), \\\"DCA: Emergency transfer failed\\\");\\n        emit EmergencyWithdrawal(address(token), balance, to);\\n    }\\n\\n    /// Change the address that can update the oracle.\\n    function setOracleUpdater(address _newOracleUpdater)\\n        external\\n        onlyOracleUpdater\\n    {\\n        oracleUpdater = _newOracleUpdater;\\n        emit OracleUpdaterChanged(_newOracleUpdater);\\n    }\\n\\n    /// Update the oracle\\n    function setOracle(Oracle _newOracle) public onlyOracleUpdater {\\n        oracle = _newOracle;\\n        emit OracleSet(address(oracle));\\n    }\\n\\n    /// Update the beneficiary\\n    function setBeneficiary(address _beneficiary) public onlyOwner {\\n        beneficiary = _beneficiary;\\n        emit BeneficiarySet(_beneficiary);\\n    }\\n\\n    /// Update the fee\\n    function setFeeNumerator(uint256 _feeNumerator) public onlyOwner {\\n        require(_feeNumerator <= MAX_FEE_NUMERATOR, \\\"DCA: Fee too high\\\");\\n        feeNumerator = _feeNumerator;\\n        emit FeeNumeratorSet(_feeNumerator);\\n    }\\n\\n    // From here to the bottom of the file are the view calls.\\n\\n    /// Calculates hoy much |buyToken| is available to withdraw for a user order.\\n    /// Takes into account previous withdrawals and fee taken.\\n    function calculateAmountToWithdraw(UserOrder memory order)\\n        public\\n        view\\n        returns (uint256 amountToWithdraw, uint256 finalPeriod)\\n    {\\n        SwapState memory swapState = swapStates[address(order.sellToken)][\\n            address(order.buyToken)\\n        ];\\n        finalPeriod = Math.min(\\n            swapState.lastSwapPeriod,\\n            order.startingPeriod + order.numberOfSwaps - 1\\n        );\\n        amountToWithdraw = 0;\\n        for (\\n            uint256 period = order.lastPeriodWithdrawal + 1;\\n            period <= finalPeriod;\\n            period++\\n        ) {\\n            PeriodSwapState memory periodSwapState = periodsSwapStates[\\n                address(order.sellToken)\\n            ][address(order.buyToken)][period];\\n            uint256 periodSwapAmount = (periodSwapState.exchangeRate *\\n                order.amountPerSwap) / 1e27;\\n            uint256 fee = (periodSwapAmount * periodSwapState.feeNumerator) /\\n                FEE_DENOMINATOR;\\n            amountToWithdraw += periodSwapAmount - fee;\\n        }\\n    }\\n\\n    function getCurrentPeriod() public view returns (uint256 period) {\\n        period = block.number / BLOCKS_PER_DAY;\\n    }\\n\\n    function getUserOrders(address userAddress)\\n        external\\n        view\\n        returns (UserOrder[] memory)\\n    {\\n        return orders[userAddress];\\n    }\\n\\n    function getSwapState(address sellToken, address buyToken)\\n        external\\n        view\\n        returns (SwapState memory)\\n    {\\n        return swapStates[sellToken][buyToken];\\n    }\\n\\n    function getPeriodSwapState(\\n        address sellToken,\\n        address buyToken,\\n        uint256 period\\n    ) external view returns (PeriodSwapState memory) {\\n        return periodsSwapStates[sellToken][buyToken][period];\\n    }\\n}\\n\",\"keccak256\":\"0xa95b262fd75f759c6680b2b127fd440e6b4ba49f2fe184d22a106010268edff8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface Oracle {\\n    function consult(\\n        address tokenIn,\\n        uint256 amountIn,\\n        address tokenOut\\n    ) external view returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x00808b842e95a6c63365936c05d804d5f82a752b6541b95b5c8763b56eb78142\",\"license\":\"MIT\"},\"contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISwapper {\\n    function swap(\\n        address _sellToken,\\n        address _buyToken,\\n        uint256 _inAmount,\\n        uint256 _outAmount,\\n        bytes calldata _params\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa7084b5a2809672c9a513ea7f22e1c47af7c0320d5575ded394383e8c9faa0bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200008057601f62002eba38819003918201601f19168301916001600160401b03831184841017620000855780849260609460405283398101031262000080578051620000709162000054826200009b565b604060208201519162000067836200009b565b015191620000ad565b604051612ccc9081620001ee8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116036200008057565b6020907f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a2492600054907f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa8460018060a01b03199433868616176000556040519060018060a01b0395863391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600085a360068054600780548a16331790556001600160a81b031916918716918217600160a01b1790558152a11680916005541617600555604051908152a16117708111620001b4576020817fc1bcceddd77fdc95a8da9bec5802d2e0bb564dd02c0730222d8e12030bd9104392600455604051908152a1565b60405162461bcd60e51b8152602060048201526011602482015270088868274408ccaca40e8dede40d0d2ced607b1b6044820152606490fdfe60806040526004361015610013575b600080fd5b60003560e01c806306dc1f6a14610257578063086146d21461024e5780631709945a146102455780631b97e6e61461023c5780631c31f7101461023357806321ba7d631461022a57806338af3eed1461022157806363c69f08146102185780636bb987fe1461020f578063715018a614610206578063757f7934146101fd578063793b8c6d146101f45780637adbf973146101eb5780637dc0d1d0146101e2578063805d64a0146101d9578063851a1405146101d05780638da5cb5b146101c757806393bc6d7c146101be578063958e2d31146101b5578063a45db911146101ac578063aa24dca2146101a3578063ad2f6bf91461019a578063cec5afe714610191578063d73792a914610188578063e111e3e71461017f578063e86dea4a14610176578063f2fde38b1461016d578063fd9b5687146101645763fe8799181461015c57600080fd5b61000e6117d3565b5061000e611797565b5061000e6116a3565b5061000e611666565b5061000e61162b565b5061000e6115ee565b5061000e611535565b5061000e6114f0565b5061000e6112e4565b5061000e6111f6565b5061000e610ed6565b5061000e610e3c565b5061000e610de9565b5061000e610d5e565b5061000e610d0b565b5061000e610cb8565b5061000e610c00565b5061000e610b25565b5061000e610a5d565b5061000e6109b5565b5061000e610979565b5061000e6108a3565b5061000e6107c4565b5061000e610705565b5061000e610603565b5061000e61056e565b5061000e6104f5565b5061000e610471565b5061000e610373565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60c0810190811067ffffffffffffffff8211176102ca57604052565b6102d261027e565b604052565b6060810190811067ffffffffffffffff8211176102ca57604052565b6040810190811067ffffffffffffffff8211176102ca57604052565b67ffffffffffffffff81116102ca57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176102ca57604052565b60405190610371826102ae565b565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356103af81610260565b6024356103bb81610260565b6064356103c781610260565b6084359267ffffffffffffffff9283851161000e573660238601121561000e578460040135938411610459575b6040519361042a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160186610323565b808552366024828801011161000e576020816000926024610457990183890137860101526044359161229b565b005b61046161027e565b6103f4565b600091031261000e57565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405161438043048152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261000e576004356104e581610260565b906024356104f281610260565b90565b503461000e5761055073ffffffffffffffffffffffffffffffffffffffff61051c366104af565b9116600052600160205260406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b805460019091015460408051928352602083019190915290f35b0390f35b503461000e5760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576105f16040516105ad816102ae565b6004356105b981610260565b81526024356105c781610260565b602082015260443560408201526064356060820152608435608082015260a43560a0820152612af2565b60408051928352602083019190915290f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24602060043561066281610260565b73ffffffffffffffffffffffffffffffffffffffff9061068782600054163314611b1d565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006005541617600555604051908152a1005b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc606091011261000e576004356106f181610260565b906024356106fe81610260565b9060443590565b503461000e57606073ffffffffffffffffffffffffffffffffffffffff61072b366106bb565b6107826040949392859485948551610742816102d7565b6000968188809352826020820152015216845260026020528484209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b90825260205220908051610795816102d7565b825492838252826002600183015492602085019384520154920191825282519384525160208401525190820152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60055416604051908152f35b60208082019080835283518092528060408094019401926000905b83821061084157505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff90811688528185015116878501528082015187830152606080820151908801526080808201519088015260a0908101519087015260c09095019493820193600190910190610832565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff6004356108f581610260565b1660005260038152604060002090815467ffffffffffffffff811161096c575b604051919261092a600583901b850184610323565b8183526000908152838120938084015b83831061094f576040518061056a8782610817565b60068260019261095e896127a7565b81520196019201919461093a565b61097461027e565b610915565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760206040516143808152f35b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a5a5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691610a2c338414611b1d565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610ab073ffffffffffffffffffffffffffffffffffffffff600054163314611b1d565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055005b8054821015610af6576000526006602060002091020190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610b6181610260565b60243573ffffffffffffffffffffffffffffffffffffffff8092166000526003602052604060002090815481101561000e57610b9c91610ada565b50805460018201546002830154600384015460048501546005909501546040805173ffffffffffffffffffffffffffffffffffffffff96891687168152979094169094166020870152918501526060840152608083019190915260a082015260c090f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa6020600435610c5f81610260565b73ffffffffffffffffffffffffffffffffffffffff90610c8482600754163314612a21565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006006541617600655604051908152a1005b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60065416604051908152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60075416604051908152f35b503461000e5773ffffffffffffffffffffffffffffffffffffffff610dbb610d85366106bb565b93909116600052600260205260406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b9060005260205260606040600020805490600260018201549101549060405192835260208301526040820152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e576040610ead73ffffffffffffffffffffffffffffffffffffffff610e65366104af565b9190600060208651610e76816102f3565b8281520152166000526001602052826000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b8151610eb8816102f3565b60206001835493848452015491019081528251918252516020820152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610f1281612890565b610f4581610f403373ffffffffffffffffffffffffffffffffffffffff166000526003602052604060002090565b610ada565b5090610f81610f68835473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b610fab8173ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b610ff9610fd2610f68600187015473ffffffffffffffffffffffffffffffffffffffff1690565b80929073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b61101461100f6004870154600388015490611da6565b611d27565b9460018201938454871161102457005b73ffffffffffffffffffffffffffffffffffffffff946110dc610f68946110ad8a61109e611189996110796110e29873ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b90600052602052604060002090565b60028601916110be83548254611d61565b90556110d1600183549201918254611d61565b905554915489611d61565b90611c6c565b95600582015561116f60006020611155611113610f68865473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018c905293849283919082906044820190565b03925af19081156111e9575b6000916111bb575b50612805565b5473ffffffffffffffffffffffffffffffffffffffff1690565b604051938452169133907f1aea12ef3450ec7749a467b47e7d800a7b493e4601d440ac5aebb94f747c122890602090a4005b6111dc915060203d81116111e2575b6111d48183610323565b810190611c9d565b38611169565b503d6111ca565b6111f1611cb5565b611161565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561124c73ffffffffffffffffffffffffffffffffffffffff600054163314611b1d565b6117708111611286576020817fc1bcceddd77fdc95a8da9bec5802d2e0bb564dd02c0730222d8e12030bd9104392600455604051908152a1005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4443413a2046656520746f6f20686967680000000000000000000000000000006044820152fd5b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f3ab9db27a4cdd8c603a752b62d5fbd93b4b3509fe2596708e9688e42bbac357660043561134181610260565b6024359061134e82610260565b73ffffffffffffffffffffffffffffffffffffffff9061137382600054163314611b1d565b6006546113859060a01c60ff16612957565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529291169060208084602481865afa9384156114e3575b6000946114aa575b506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024810185905261147b929161144391818160448160008a5af191821561149d575b600092611480575b50506129bc565b6040519384938491939290604091606084019573ffffffffffffffffffffffffffffffffffffffff8093168552602085015216910152565b0390a1005b6114969250803d106111e2576111d48183610323565b388061143c565b6114a5611cb5565b611434565b8194506114d36114439161147b94933d88116114dc575b6114cb8183610323565b810190611ffb565b949192506113cf565b503d6114c1565b6114eb611cb5565b6113c7565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060ff60065460a01c166040519015158152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f533d09c424dd042c543d0802296b09115923bce3f566e20c069e3d754a8aff8f60207fffffffffffffffffffffffff00000000000000000000000000000000000000006004356115b581610260565b6007549073ffffffffffffffffffffffffffffffffffffffff906115dc3383851614612a21565b169182911617600755604051908152a1005b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020604051620f42408152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610457600435612890565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020600454604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356116df81610260565b73ffffffffffffffffffffffffffffffffffffffff61170381600054163314611b1d565b8116156117135761045790611b82565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760206040516117708152f35b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761056a60043561181281610260565b60243561181e81610260565b604435606435907faf8bd3c5abe498e30aea149b38afa6e7d9bbe58c9129b38eff2912440734c6e273ffffffffffffffffffffffffffffffffffffffff93848616936118d56118b860206118728488611c6c565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481019190915291829081906064820190565b038160008b5af1908115611b10575b600091611af2575b50611cc2565b61192c6119028673ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b96831680979073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b60018101805415611a95575b5461198a61194582611d78565b9461196d611951610364565b73ffffffffffffffffffffffffffffffffffffffff909c168c52565b73ffffffffffffffffffffffffffffffffffffffff1660208b0152565b8560408a01528260608a01528360808a015260a08901526119ac858254611da6565b905560016119fc6119e1886110798973ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b6119ee61100f8587611da6565b600052602052604060002090565b01611a08858254611da6565b9055611a68611a373373ffffffffffffffffffffffffffffffffffffffff166000526003602052604060002090565b5497611a633373ffffffffffffffffffffffffffffffffffffffff166000526003602052604060002090565b611db2565b60408051888152602081019590955284015260608301523391608090a46040519081529081906020820190565b611aa26143804304611d27565b81556040805173ffffffffffffffffffffffffffffffffffffffff89811682528a1660208201527f1860ddfae81fa4edaec7accf480512d07263c8e909d5cdae84da78e098fc7b099190a1611938565b611b0a915060203d81116111e2576111d48183610323565b386118cf565b611b18611cb5565b6118c7565b15611b2457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6b033b2e3c9fd0803ce800000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516611c60570290565b611c68611bf1565b0290565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516611c60570290565b9081602091031261000e5751801515810361000e5790565b506040513d6000823e3d90fd5b15611cc957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4443413a204e6f7420656e6f7567682066756e647300000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060018110611d55570190565b611d5d611bf1565b0190565b818110611d6c570390565b611d74611bf1565b0390565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611d55570190565b81198111611d55570190565b8054611dd59168010000000000000000821015611ec5575b600182018155610ada565b919091611e9657805182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff91821617835560059160a091611e7190602083015116600186019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b6040810151600285015560608101516003850155608081015160048501550151910155565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b611ecd61027e565b611dca565b15611ed957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4443413a20496e76616c696420706572696f64000000000000000000000000006044820152fd5b15611f3e57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4443413a20506572696f642063616e6e6f7420626520696e207468652066757460448201527f75726500000000000000000000000000000000000000000000000000000000006064820152fd5b8115611fcc570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9081602091031261000e575190565b1561201157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4443413a204f7261636c65206661696c757265000000000000000000000000006044820152fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611d55570190565b156120a457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4443413a20466565207472616e7366657220746f2062656e656669636961727960448201527f206661696c6564000000000000000000000000000000000000000000000000006064820152fd5b1561212f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4443413a205472616e7366657220746f2053776170706572206661696c6564006044820152fd5b9391929095949573ffffffffffffffffffffffffffffffffffffffff809116855260209316838501526040840152606083015260a060808301528351908160a08401526000945b828610612220575050601f817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09260c0959611612213575b0116010190565b600085828601015261220c565b85810182015184870160c00152948101946121d4565b1561223d57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4443413a204e6f7420656e6f7567682062616c616e63652072657475726e65646044820152fd5b926123ac909492946122d1836110798773ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b936001850154916122eb886122e585611d78565b14611ed2565b6122fb6143804304891115611f37565b85549261231661230d60045486611c6c565b620f4240900490565b966123218886611d61565b948a888b60208261234a610f6860065473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f8c86f1e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152602482018e90529092166044830152909b8c9190829081906064820190565b03915afa998a1561279a575b60009a61275b575b5061241b939261109e61240b93611079612405946123df8f151561200a565b73ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b9461206f565b6001840155600184015490611d61565b905561242f8461242a87611c21565b611fc2565b8155600260045491015573ffffffffffffffffffffffffffffffffffffffff96878116966124f2600060206124d88b61247d60055473ffffffffffffffffffffffffffffffffffffffff1690565b956040519485809481937fa9059cbb000000000000000000000000000000000000000000000000000000009a8b8452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af190811561274e575b60009161272f575b5061209d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000808252306004830152888b169a9094919290919087908b906020868f81806024810103915afa958615612722575b6000966126f4575b5060405190815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101929092526125a49190602090829081600081604481015b03925af19081156126e7575b6000916126c8575b50612128565b1690813b1561000e578660008782947f28c738dbec11a1bed94ba127a3712d54bcd39cf4ae95b6ebd671aaf10fd0287b9b8361262d9861261761265a9c604051988997889687957f2506c0180000000000000000000000000000000000000000000000000000000087526004870161218d565b03925af180156126bb575b6126a2575b50611da6565b6040519182523060048301526020826024818b5afa918215612695575b600092612674575b501115612236565b60408051918252602082019290925290819081015b0390a4565b61268e91925060203d6020116114dc576114cb8183610323565b9038612652565b61269d611cb5565b61264a565b806126af6126b59261030f565b80610466565b38612627565b6126c3611cb5565b612622565b6126e1915060203d6020116111e2576111d48183610323565b3861259e565b6126ef611cb5565b612596565b60209196509261258a926127176125a495843d86116114dc576114cb8183610323565b97925092509261254c565b61272a611cb5565b612544565b612748915060203d6020116111e2576111d48183610323565b386124ec565b612756611cb5565b6124e4565b6123df9a509261109e61240b936110796124059461278b61241b999860203d6020116114dc576114cb8183610323565b9e5094505093505092936123c0565b6127a2611cb5565b6123b8565b906040516127b4816102ae565b60a06005829473ffffffffffffffffffffffffffffffffffffffff80825416855260018201541660208501526002810154604085015260038101546060850152600481015460808501520154910152565b1561280c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4443413a204e6f7420656e6f7567682066756e647320746f207769746864726160448201527f77000000000000000000000000000000000000000000000000000000000000006064820152fd5b6128be81610f403373ffffffffffffffffffffffffffffffffffffffff166000526003602052604060002090565b509073ffffffffffffffffffffffffffffffffffffffff612921610f6860016128ee6128e9876127a7565b612af2565b600588929801550161116f60006020611155611113610f68865473ffffffffffffffffffffffffffffffffffffffff1690565b604051938452169133907fe6f9d2780c8923607fbb084350c15a1655c3fc682c989303c218a016a00324a090806020810161266f565b1561295e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4443413a2047756172647261696c7320617265206f66660000000000000000006044820152fd5b156129c357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4443413a20456d657267656e6379207472616e73666572206661696c656400006044820152fd5b15612a2857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4443413a2063616c6c6572206973206e6f7420746865206f7261636c6520757060448201527f64617465720000000000000000000000000000000000000000000000000000006064820152fd5b90604051612ab9816102f3565b602060018294805484520154910152565b90604051612ad7816102d7565b60406002829480548452600181015460208501520154910152565b612b3c612b16610f68835173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b91612bb46020612b96612b9182860196612b6d610f68895173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b612aac565b0151612bae61100f6080860151606087015190611da6565b90612c84565b91600093612bc560a0830151611d78565b915b84831115612bd457505050565b909194612c77612c7d91612c71612c35612c308a61109e612c0f6123df610f688b5173ffffffffffffffffffffffffffffffffffffffff1690565b612b6d610f688c5173ffffffffffffffffffffffffffffffffffffffff1690565b612aca565b612c6b61230d8251612c62612c50604092838c015190611c6c565b6b033b2e3c9fd0803ce8000000900490565b93015183611c6c565b90611d61565b90611da6565b9561206f565b9190612bc7565b9080821015612c91575090565b90509056fea264697066735822122093e9be1bfa4b8cad4f0c16a289db181a078529e3013204edc2587899f0522b3564736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806306dc1f6a14610257578063086146d21461024e5780631709945a146102455780631b97e6e61461023c5780631c31f7101461023357806321ba7d631461022a57806338af3eed1461022157806363c69f08146102185780636bb987fe1461020f578063715018a614610206578063757f7934146101fd578063793b8c6d146101f45780637adbf973146101eb5780637dc0d1d0146101e2578063805d64a0146101d9578063851a1405146101d05780638da5cb5b146101c757806393bc6d7c146101be578063958e2d31146101b5578063a45db911146101ac578063aa24dca2146101a3578063ad2f6bf91461019a578063cec5afe714610191578063d73792a914610188578063e111e3e71461017f578063e86dea4a14610176578063f2fde38b1461016d578063fd9b5687146101645763fe8799181461015c57600080fd5b61000e6117d3565b5061000e611797565b5061000e6116a3565b5061000e611666565b5061000e61162b565b5061000e6115ee565b5061000e611535565b5061000e6114f0565b5061000e6112e4565b5061000e6111f6565b5061000e610ed6565b5061000e610e3c565b5061000e610de9565b5061000e610d5e565b5061000e610d0b565b5061000e610cb8565b5061000e610c00565b5061000e610b25565b5061000e610a5d565b5061000e6109b5565b5061000e610979565b5061000e6108a3565b5061000e6107c4565b5061000e610705565b5061000e610603565b5061000e61056e565b5061000e6104f5565b5061000e610471565b5061000e610373565b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60c0810190811067ffffffffffffffff8211176102ca57604052565b6102d261027e565b604052565b6060810190811067ffffffffffffffff8211176102ca57604052565b6040810190811067ffffffffffffffff8211176102ca57604052565b67ffffffffffffffff81116102ca57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176102ca57604052565b60405190610371826102ae565b565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356103af81610260565b6024356103bb81610260565b6064356103c781610260565b6084359267ffffffffffffffff9283851161000e573660238601121561000e578460040135938411610459575b6040519361042a60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160186610323565b808552366024828801011161000e576020816000926024610457990183890137860101526044359161229b565b005b61046161027e565b6103f4565b600091031261000e57565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060405161438043048152f35b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261000e576004356104e581610260565b906024356104f281610260565b90565b503461000e5761055073ffffffffffffffffffffffffffffffffffffffff61051c366104af565b9116600052600160205260406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b805460019091015460408051928352602083019190915290f35b0390f35b503461000e5760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576105f16040516105ad816102ae565b6004356105b981610260565b81526024356105c781610260565b602082015260443560408201526064356060820152608435608082015260a43560a0820152612af2565b60408051928352602083019190915290f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f04d55a8be181fb8d75b76f2d48aa0b2ee40f47e53d6e61763eeeec46feea8a24602060043561066281610260565b73ffffffffffffffffffffffffffffffffffffffff9061068782600054163314611b1d565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006005541617600555604051908152a1005b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc606091011261000e576004356106f181610260565b906024356106fe81610260565b9060443590565b503461000e57606073ffffffffffffffffffffffffffffffffffffffff61072b366106bb565b6107826040949392859485948551610742816102d7565b6000968188809352826020820152015216845260026020528484209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b90825260205220908051610795816102d7565b825492838252826002600183015492602085019384520154920191825282519384525160208401525190820152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60055416604051908152f35b60208082019080835283518092528060408094019401926000905b83821061084157505050505090565b8451805173ffffffffffffffffffffffffffffffffffffffff90811688528185015116878501528082015187830152606080820151908801526080808201519088015260a0908101519087015260c09095019493820193600190910190610832565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff6004356108f581610260565b1660005260038152604060002090815467ffffffffffffffff811161096c575b604051919261092a600583901b850184610323565b8183526000908152838120938084015b83831061094f576040518061056a8782610817565b60068260019261095e896127a7565b81520196019201919461093a565b61097461027e565b610915565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760206040516143808152f35b503461000e576000807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a5a5780547fffffffffffffffffffffffff000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff821691610a2c338414611b1d565b16825581604051917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610ab073ffffffffffffffffffffffffffffffffffffffff600054163314611b1d565b600680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055005b8054821015610af6576000526006602060002091020190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610b6181610260565b60243573ffffffffffffffffffffffffffffffffffffffff8092166000526003602052604060002090815481101561000e57610b9c91610ada565b50805460018201546002830154600384015460048501546005909501546040805173ffffffffffffffffffffffffffffffffffffffff96891687168152979094169094166020870152918501526060840152608083019190915260a082015260c090f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa6020600435610c5f81610260565b73ffffffffffffffffffffffffffffffffffffffff90610c8482600754163314612a21565b16807fffffffffffffffffffffffff00000000000000000000000000000000000000006006541617600655604051908152a1005b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60065416604051908152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60075416604051908152f35b503461000e5773ffffffffffffffffffffffffffffffffffffffff610dbb610d85366106bb565b93909116600052600260205260406000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b9060005260205260606040600020805490600260018201549101549060405192835260208301526040820152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b503461000e576040610ead73ffffffffffffffffffffffffffffffffffffffff610e65366104af565b9190600060208651610e76816102f3565b8281520152166000526001602052826000209073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b8151610eb8816102f3565b60206001835493848452015491019081528251918252516020820152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610f1281612890565b610f4581610f403373ffffffffffffffffffffffffffffffffffffffff166000526003602052604060002090565b610ada565b5090610f81610f68835473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b610fab8173ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b610ff9610fd2610f68600187015473ffffffffffffffffffffffffffffffffffffffff1690565b80929073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b61101461100f6004870154600388015490611da6565b611d27565b9460018201938454871161102457005b73ffffffffffffffffffffffffffffffffffffffff946110dc610f68946110ad8a61109e611189996110796110e29873ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b9073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b90600052602052604060002090565b60028601916110be83548254611d61565b90556110d1600183549201918254611d61565b905554915489611d61565b90611c6c565b95600582015561116f60006020611155611113610f68865473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018c905293849283919082906044820190565b03925af19081156111e9575b6000916111bb575b50612805565b5473ffffffffffffffffffffffffffffffffffffffff1690565b604051938452169133907f1aea12ef3450ec7749a467b47e7d800a7b493e4601d440ac5aebb94f747c122890602090a4005b6111dc915060203d81116111e2575b6111d48183610323565b810190611c9d565b38611169565b503d6111ca565b6111f1611cb5565b611161565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561124c73ffffffffffffffffffffffffffffffffffffffff600054163314611b1d565b6117708111611286576020817fc1bcceddd77fdc95a8da9bec5802d2e0bb564dd02c0730222d8e12030bd9104392600455604051908152a1005b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4443413a2046656520746f6f20686967680000000000000000000000000000006044820152fd5b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f3ab9db27a4cdd8c603a752b62d5fbd93b4b3509fe2596708e9688e42bbac357660043561134181610260565b6024359061134e82610260565b73ffffffffffffffffffffffffffffffffffffffff9061137382600054163314611b1d565b6006546113859060a01c60ff16612957565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529291169060208084602481865afa9384156114e3575b6000946114aa575b506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024810185905261147b929161144391818160448160008a5af191821561149d575b600092611480575b50506129bc565b6040519384938491939290604091606084019573ffffffffffffffffffffffffffffffffffffffff8093168552602085015216910152565b0390a1005b6114969250803d106111e2576111d48183610323565b388061143c565b6114a5611cb5565b611434565b8194506114d36114439161147b94933d88116114dc575b6114cb8183610323565b810190611ffb565b949192506113cf565b503d6114c1565b6114eb611cb5565b6113c7565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602060ff60065460a01c166040519015158152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f533d09c424dd042c543d0802296b09115923bce3f566e20c069e3d754a8aff8f60207fffffffffffffffffffffffff00000000000000000000000000000000000000006004356115b581610260565b6007549073ffffffffffffffffffffffffffffffffffffffff906115dc3383851614612a21565b169182911617600755604051908152a1005b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020604051620f42408152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57610457600435612890565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020600454604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576004356116df81610260565b73ffffffffffffffffffffffffffffffffffffffff61170381600054163314611b1d565b8116156117135761045790611b82565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760206040516117708152f35b503461000e5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761056a60043561181281610260565b60243561181e81610260565b604435606435907faf8bd3c5abe498e30aea149b38afa6e7d9bbe58c9129b38eff2912440734c6e273ffffffffffffffffffffffffffffffffffffffff93848616936118d56118b860206118728488611c6c565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481019190915291829081906064820190565b038160008b5af1908115611b10575b600091611af2575b50611cc2565b61192c6119028673ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b96831680979073ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b60018101805415611a95575b5461198a61194582611d78565b9461196d611951610364565b73ffffffffffffffffffffffffffffffffffffffff909c168c52565b73ffffffffffffffffffffffffffffffffffffffff1660208b0152565b8560408a01528260608a01528360808a015260a08901526119ac858254611da6565b905560016119fc6119e1886110798973ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b6119ee61100f8587611da6565b600052602052604060002090565b01611a08858254611da6565b9055611a68611a373373ffffffffffffffffffffffffffffffffffffffff166000526003602052604060002090565b5497611a633373ffffffffffffffffffffffffffffffffffffffff166000526003602052604060002090565b611db2565b60408051888152602081019590955284015260608301523391608090a46040519081529081906020820190565b611aa26143804304611d27565b81556040805173ffffffffffffffffffffffffffffffffffffffff89811682528a1660208201527f1860ddfae81fa4edaec7accf480512d07263c8e909d5cdae84da78e098fc7b099190a1611938565b611b0a915060203d81116111e2576111d48183610323565b386118cf565b611b18611cb5565b6118c7565b15611b2457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000549073ffffffffffffffffffffffffffffffffffffffff80911691827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6b033b2e3c9fd0803ce800000090807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516611c60570290565b611c68611bf1565b0290565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821181151516611c60570290565b9081602091031261000e5751801515810361000e5790565b506040513d6000823e3d90fd5b15611cc957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4443413a204e6f7420656e6f7567682066756e647300000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060018110611d55570190565b611d5d611bf1565b0190565b818110611d6c570390565b611d74611bf1565b0390565b6001907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111611d55570190565b81198111611d55570190565b8054611dd59168010000000000000000821015611ec5575b600182018155610ada565b919091611e9657805182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff91821617835560059160a091611e7190602083015116600186019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b6040810151600285015560608101516003850155608081015160048501550151910155565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b611ecd61027e565b611dca565b15611ed957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4443413a20496e76616c696420706572696f64000000000000000000000000006044820152fd5b15611f3e57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4443413a20506572696f642063616e6e6f7420626520696e207468652066757460448201527f75726500000000000000000000000000000000000000000000000000000000006064820152fd5b8115611fcc570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9081602091031261000e575190565b1561201157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4443413a204f7261636c65206661696c757265000000000000000000000000006044820152fd5b6001907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611d55570190565b156120a457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4443413a20466565207472616e7366657220746f2062656e656669636961727960448201527f206661696c6564000000000000000000000000000000000000000000000000006064820152fd5b1561212f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4443413a205472616e7366657220746f2053776170706572206661696c6564006044820152fd5b9391929095949573ffffffffffffffffffffffffffffffffffffffff809116855260209316838501526040840152606083015260a060808301528351908160a08401526000945b828610612220575050601f817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09260c0959611612213575b0116010190565b600085828601015261220c565b85810182015184870160c00152948101946121d4565b1561223d57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4443413a204e6f7420656e6f7567682062616c616e63652072657475726e65646044820152fd5b926123ac909492946122d1836110798773ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b936001850154916122eb886122e585611d78565b14611ed2565b6122fb6143804304891115611f37565b85549261231661230d60045486611c6c565b620f4240900490565b966123218886611d61565b948a888b60208261234a610f6860065473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f8c86f1e400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8086166004830152602482018e90529092166044830152909b8c9190829081906064820190565b03915afa998a1561279a575b60009a61275b575b5061241b939261109e61240b93611079612405946123df8f151561200a565b73ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b9461206f565b6001840155600184015490611d61565b905561242f8461242a87611c21565b611fc2565b8155600260045491015573ffffffffffffffffffffffffffffffffffffffff96878116966124f2600060206124d88b61247d60055473ffffffffffffffffffffffffffffffffffffffff1690565b956040519485809481937fa9059cbb000000000000000000000000000000000000000000000000000000009a8b8452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af190811561274e575b60009161272f575b5061209d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000808252306004830152888b169a9094919290919087908b906020868f81806024810103915afa958615612722575b6000966126f4575b5060405190815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101929092526125a49190602090829081600081604481015b03925af19081156126e7575b6000916126c8575b50612128565b1690813b1561000e578660008782947f28c738dbec11a1bed94ba127a3712d54bcd39cf4ae95b6ebd671aaf10fd0287b9b8361262d9861261761265a9c604051988997889687957f2506c0180000000000000000000000000000000000000000000000000000000087526004870161218d565b03925af180156126bb575b6126a2575b50611da6565b6040519182523060048301526020826024818b5afa918215612695575b600092612674575b501115612236565b60408051918252602082019290925290819081015b0390a4565b61268e91925060203d6020116114dc576114cb8183610323565b9038612652565b61269d611cb5565b61264a565b806126af6126b59261030f565b80610466565b38612627565b6126c3611cb5565b612622565b6126e1915060203d6020116111e2576111d48183610323565b3861259e565b6126ef611cb5565b612596565b60209196509261258a926127176125a495843d86116114dc576114cb8183610323565b97925092509261254c565b61272a611cb5565b612544565b612748915060203d6020116111e2576111d48183610323565b386124ec565b612756611cb5565b6124e4565b6123df9a509261109e61240b936110796124059461278b61241b999860203d6020116114dc576114cb8183610323565b9e5094505093505092936123c0565b6127a2611cb5565b6123b8565b906040516127b4816102ae565b60a06005829473ffffffffffffffffffffffffffffffffffffffff80825416855260018201541660208501526002810154604085015260038101546060850152600481015460808501520154910152565b1561280c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4443413a204e6f7420656e6f7567682066756e647320746f207769746864726160448201527f77000000000000000000000000000000000000000000000000000000000000006064820152fd5b6128be81610f403373ffffffffffffffffffffffffffffffffffffffff166000526003602052604060002090565b509073ffffffffffffffffffffffffffffffffffffffff612921610f6860016128ee6128e9876127a7565b612af2565b600588929801550161116f60006020611155611113610f68865473ffffffffffffffffffffffffffffffffffffffff1690565b604051938452169133907fe6f9d2780c8923607fbb084350c15a1655c3fc682c989303c218a016a00324a090806020810161266f565b1561295e57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4443413a2047756172647261696c7320617265206f66660000000000000000006044820152fd5b156129c357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4443413a20456d657267656e6379207472616e73666572206661696c656400006044820152fd5b15612a2857565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4443413a2063616c6c6572206973206e6f7420746865206f7261636c6520757060448201527f64617465720000000000000000000000000000000000000000000000000000006064820152fd5b90604051612ab9816102f3565b602060018294805484520154910152565b90604051612ad7816102d7565b60406002829480548452600181015460208501520154910152565b612b3c612b16610f68835173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff166000526001602052604060002090565b91612bb46020612b96612b9182860196612b6d610f68895173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16600052602052604060002090565b612aac565b0151612bae61100f6080860151606087015190611da6565b90612c84565b91600093612bc560a0830151611d78565b915b84831115612bd457505050565b909194612c77612c7d91612c71612c35612c308a61109e612c0f6123df610f688b5173ffffffffffffffffffffffffffffffffffffffff1690565b612b6d610f688c5173ffffffffffffffffffffffffffffffffffffffff1690565b612aca565b612c6b61230d8251612c62612c50604092838c015190611c6c565b6b033b2e3c9fd0803ce8000000900490565b93015183611c6c565b90611d61565b90611da6565b9561206f565b9190612bc7565b9080821015612c91575090565b90509056fea264697066735822122093e9be1bfa4b8cad4f0c16a289db181a078529e3013204edc2587899f0522b3564736f6c634300080d0033",
  "devdoc": {
    "details": "To perform the swaps, we aggregate the tokens for all the users and make one big swap instead of many small ones.",
    "kind": "dev",
    "methods": {
      "createOrder(address,address,uint256,uint256)": {
        "params": {
          "_amountPerSwap": "amount of _sellToken to sell each period.",
          "_buyToken": "token to buy on each period.",
          "_numberOfSwaps": "number of periods to do the swapping.",
          "_sellToken": "token to sell on each period."
        }
      },
      "executeOrder(address,address,uint256,address,bytes)": {
        "params": {
          "_buyToken": "token to buy on the swap.",
          "_params": "params to send to |_swapper| for performing the swap.",
          "_period": "period to perform the swap for. It has only one possible valid value, so it is not strictly necessary.",
          "_sellToken": "token to sell on the swap.",
          "_swapper": "address that will perform the swap."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAll(uint256)": {
        "params": {
          "index": "the index of the |orders| array for msg.sender."
        }
      },
      "withdrawSwapped(uint256)": {
        "params": {
          "index": "the index of the |orders| array for msg.sender."
        }
      }
    },
    "title": "DCA This contract allows users to deposit one token and gradually swaps it for another one every day at the price it's trading at, allowing user to buy the target token using a Dollar-Cost Averaging (DCA) strategy.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RemainingWithdrawal(address,uint256,address,uint256)": {
        "notice": "Emitted when a user withdraws their principal early. ie. before it was swapped."
      },
      "SwappedWithdrawal(address,uint256,address,uint256)": {
        "notice": "Emitted when a user withdraws the funds that were already swapped."
      }
    },
    "kind": "user",
    "methods": {
      "BLOCKS_PER_DAY()": {
        "notice": "Number of blocks in a day assuming 5 seconds per block. Works for the Celo blockchain."
      },
      "MAX_FEE_NUMERATOR()": {
        "notice": "Upper limit of the fee that can be charged on swaps. Has to be divided by |FEE_DENOMINATOR|. Equivalent to 60bps."
      },
      "beneficiary()": {
        "notice": "Where to send the fees."
      },
      "calculateAmountToWithdraw((address,address,uint256,uint256,uint256,uint256))": {
        "notice": "Calculates hoy much |buyToken| is available to withdraw for a user order. Takes into account previous withdrawals and fee taken."
      },
      "createOrder(address,address,uint256,uint256)": {
        "notice": "Starts a new DCA position for the |msg.sender|. When creating a new position, we add the |_amountPerSwap| to the |amountToSwap| variable on |SwapState| and to |amountToReduce| on the final period's |PeriodSwapState|. Thus, the amount to swap daily will increase between the current period and the final one."
      },
      "emergencyWithdrawal(address,address)": {
        "notice": "In case of emergency, in the beginning the owner can remove the funds to return them to users. Should be turned off before receiving any meaningful deposits by calling |turnOffGuardrails|."
      },
      "executeOrder(address,address,uint256,address,bytes)": {
        "notice": "Executes a swap between two tokens. The period must be the last executed + 1. The swapping is done by the |_swapper|. We calculate the required exchange rate using an oracle, send them the funds to swap and expect them to return the calculated return amount. This allows us to more easily add pairs since we just need the oracle support, not the exact routes to follow. Callers are incentivized to call this function for the arbitrage opportunity. In other words, the general logic followed here is: - Calculate and send the fee to the |beneficiary|. - Calculate the exchange rate using |oracle|. - Send the swap amount to |_swapper| can call its |swap| function. - Check that it returned the required funds taking the exchange rate into account."
      },
      "feeNumerator()": {
        "notice": "Active fee on swaps. To be used together with |FEE_DENOMINATOR|."
      },
      "guardrailsOn()": {
        "notice": "If true, the owner can withdraw funds. Should be turned off after there is sufficient confidence in the code, for example after audits."
      },
      "oracle()": {
        "notice": "Oracle to use to get the amount to receive on swaps."
      },
      "oracleUpdater()": {
        "notice": "Address that can update the oracle. Matches the owner at first, but should be operated by the community after a while."
      },
      "orders(address,uint256)": {
        "notice": "A list of |UserOrder| for each user address."
      },
      "periodsSwapStates(address,address,uint256)": {
        "notice": "Contains information related to swaps for a (sellToken, buyToken, period) tuple. See |PeriodSwapState| for more info."
      },
      "setBeneficiary(address)": {
        "notice": "Update the beneficiary"
      },
      "setFeeNumerator(uint256)": {
        "notice": "Update the fee"
      },
      "setOracle(address)": {
        "notice": "Update the oracle"
      },
      "setOracleUpdater(address)": {
        "notice": "Change the address that can update the oracle."
      },
      "swapStates(address,address)": {
        "notice": "Contains the state of a token pair swaps. For a given (sellToken, buyToken) it contains how much it should swap in the next period and when the last period was."
      },
      "withdrawAll(uint256)": {
        "notice": "Withdraw the funds that were already swapped for the caller user AND the funds that were not swapped yet, effectively terminating the position."
      },
      "withdrawSwapped(uint256)": {
        "notice": "Withdraw the funds that were already swapped for the caller user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DCA.sol:DCA",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1137,
        "contract": "contracts/DCA.sol:DCA",
        "label": "swapStates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(SwapState)1119_storage))"
      },
      {
        "astId": 1147,
        "contract": "contracts/DCA.sol:DCA",
        "label": "periodsSwapStates",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodSwapState)1129_storage)))"
      },
      {
        "astId": 1154,
        "contract": "contracts/DCA.sol:DCA",
        "label": "orders",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(UserOrder)1114_storage)dyn_storage)"
      },
      {
        "astId": 1157,
        "contract": "contracts/DCA.sol:DCA",
        "label": "feeNumerator",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1160,
        "contract": "contracts/DCA.sol:DCA",
        "label": "beneficiary",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1164,
        "contract": "contracts/DCA.sol:DCA",
        "label": "oracle",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(Oracle)2720"
      },
      {
        "astId": 1167,
        "contract": "contracts/DCA.sol:DCA",
        "label": "guardrailsOn",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 1170,
        "contract": "contracts/DCA.sol:DCA",
        "label": "oracleUpdater",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(UserOrder)1114_storage)dyn_storage": {
        "base": "t_struct(UserOrder)1114_storage",
        "encoding": "dynamic_array",
        "label": "struct DCA.UserOrder[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)860": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(Oracle)2720": {
        "encoding": "inplace",
        "label": "contract Oracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(UserOrder)1114_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DCA.UserOrder[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserOrder)1114_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodSwapState)1129_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => struct DCA.PeriodSwapState)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodSwapState)1129_storage))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(SwapState)1119_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct DCA.SwapState))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(SwapState)1119_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(PeriodSwapState)1129_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct DCA.PeriodSwapState))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(PeriodSwapState)1129_storage)"
      },
      "t_mapping(t_address,t_struct(SwapState)1119_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DCA.SwapState)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapState)1119_storage"
      },
      "t_mapping(t_uint256,t_struct(PeriodSwapState)1129_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DCA.PeriodSwapState)",
        "numberOfBytes": "32",
        "value": "t_struct(PeriodSwapState)1129_storage"
      },
      "t_struct(PeriodSwapState)1129_storage": {
        "encoding": "inplace",
        "label": "struct DCA.PeriodSwapState",
        "members": [
          {
            "astId": 1122,
            "contract": "contracts/DCA.sol:DCA",
            "label": "exchangeRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1125,
            "contract": "contracts/DCA.sol:DCA",
            "label": "amountToReduce",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1128,
            "contract": "contracts/DCA.sol:DCA",
            "label": "feeNumerator",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(SwapState)1119_storage": {
        "encoding": "inplace",
        "label": "struct DCA.SwapState",
        "members": [
          {
            "astId": 1116,
            "contract": "contracts/DCA.sol:DCA",
            "label": "amountToSwap",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1118,
            "contract": "contracts/DCA.sol:DCA",
            "label": "lastSwapPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserOrder)1114_storage": {
        "encoding": "inplace",
        "label": "struct DCA.UserOrder",
        "members": [
          {
            "astId": 1102,
            "contract": "contracts/DCA.sol:DCA",
            "label": "sellToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)860"
          },
          {
            "astId": 1105,
            "contract": "contracts/DCA.sol:DCA",
            "label": "buyToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)860"
          },
          {
            "astId": 1107,
            "contract": "contracts/DCA.sol:DCA",
            "label": "amountPerSwap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1109,
            "contract": "contracts/DCA.sol:DCA",
            "label": "numberOfSwaps",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1111,
            "contract": "contracts/DCA.sol:DCA",
            "label": "startingPeriod",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1113,
            "contract": "contracts/DCA.sol:DCA",
            "label": "lastPeriodWithdrawal",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}