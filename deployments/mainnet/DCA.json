{
  "address": "0x03ACD8bb7293858B5885E515C5a64a0Df63CE14f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cUSDAddress",
          "type": "address"
        },
        {
          "internalType": "contract IExchange",
          "name": "_cUSDExchange",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "buyToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPerPurchase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocksBetweenPurchases",
          "type": "uint256"
        }
      ],
      "name": "OrderCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_sellToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountPerPurchase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_blocksBetweenPurchases",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountPerPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blocksBetweenPurchases",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct DCA.Order",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "sellToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "buyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountPerPurchase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blocksBetweenPurchases",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct DCA.Order[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "sellToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "buyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountPerPurchase",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blocksBetweenPurchases",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e7aeff933dedd667fc43bf582fbd170c08585f702478b54bc51e95f238d080c",
  "receipt": {
    "to": null,
    "from": "0xe59f139acBAB76d41623870F89f107d26Cf1E2B8",
    "contractAddress": "0x03ACD8bb7293858B5885E515C5a64a0Df63CE14f",
    "transactionIndex": 5,
    "gasUsed": "1021711",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x53017eaaf1c11e330de99e8cd22f43385c3670f6e0807b075fe4a3a7af507e7b",
    "transactionHash": "0x2e7aeff933dedd667fc43bf582fbd170c08585f702478b54bc51e95f238d080c",
    "logs": [],
    "blockNumber": 13307378,
    "cumulativeGasUsed": "1585527",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x765de816845861e75a25fca122bb6898b8b1282a",
    "0x67316300f17f063085ca8bca4bd3f7a5a3c66275"
  ],
  "numDeployments": 1,
  "solcInputHash": "844e33f5724b3f135e8388f63cdcbe11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cUSDAddress\",\"type\":\"address\"},{\"internalType\":\"contract IExchange\",\"name\":\"_cUSDExchange\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerPurchase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocksBetweenPurchases\",\"type\":\"uint256\"}],\"name\":\"OrderCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountPerPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_blocksBetweenPurchases\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksBetweenPurchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct DCA.Order\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksBetweenPurchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct DCA.Order[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerPurchase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksBetweenPurchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DCA.sol\":\"DCA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/DCA.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IExchange.sol\\\";\\n\\ncontract DCA {\\n    address cUSDAddress;\\n    IExchange cUSDExchange;\\n\\n    struct Order {\\n        IERC20 sellToken;\\n        IERC20 buyToken;\\n        uint256 total;\\n        uint256 spent;\\n        uint256 amountPerPurchase;\\n        uint256 blocksBetweenPurchases;\\n        uint256 lastBlock;\\n    }\\n\\n    mapping(address => Order[]) public orders;\\n\\n    event OrderCreated(\\n        address indexed userAddress,\\n        uint256 index,\\n        uint256 total,\\n        IERC20 sellToken,\\n        IERC20 buyToken,\\n        uint256 amountPerPurchase,\\n        uint256 blocksBetweenPurchases\\n    );\\n\\n    constructor(address _cUSDAddress, IExchange _cUSDExchange) {\\n        cUSDAddress = _cUSDAddress;\\n        cUSDExchange = _cUSDExchange;\\n    }\\n\\n    function getUserOrders(address userAddress)\\n        external\\n        view\\n        returns (Order[] memory)\\n    {\\n        return orders[userAddress];\\n    }\\n\\n    function getOrder(address userAddress, uint256 index)\\n        external\\n        view\\n        returns (Order memory)\\n    {\\n        return orders[userAddress][index];\\n    }\\n\\n    function createOrder(\\n        IERC20 _sellToken,\\n        IERC20 _buyToken,\\n        uint256 _total,\\n        uint256 _amountPerPurchase,\\n        uint256 _blocksBetweenPurchases\\n    ) external returns (uint256 index) {\\n        require(\\n            _sellToken.transferFrom(msg.sender, address(this), _total),\\n            \\\"DCA: Not enough funds\\\"\\n        );\\n\\n        Order memory newOrder = Order(\\n            _sellToken,\\n            _buyToken,\\n            _total,\\n            0,\\n            _amountPerPurchase,\\n            _blocksBetweenPurchases,\\n            0\\n        );\\n\\n        index = orders[msg.sender].length;\\n        orders[msg.sender].push(newOrder);\\n\\n        emit OrderCreated(\\n            msg.sender,\\n            index,\\n            _total,\\n            _sellToken,\\n            _buyToken,\\n            _amountPerPurchase,\\n            _blocksBetweenPurchases\\n        );\\n    }\\n\\n    function executeOrder(address userAddress, uint256 index) external {\\n        Order storage order = orders[userAddress][index];\\n\\n        require(\\n            order.lastBlock + order.blocksBetweenPurchases <= block.number,\\n            \\\"DCA: Not enough time passed yet.\\\"\\n        );\\n        require(\\n            order.spent + order.amountPerPurchase <= order.total,\\n            \\\"DCA: Order fully executed\\\"\\n        );\\n\\n        order.spent += order.amountPerPurchase;\\n        order.lastBlock = block.number;\\n\\n        IExchange exchange = getMentoExchange(order.sellToken);\\n\\n        order.sellToken.approve(address(exchange), order.amountPerPurchase);\\n\\n        // TODO: Arreglar el 0, esto no puede subirse a ning\\u00fan lado as\\u00ed.\\n        uint256 boughtAmount = exchange.sell(order.amountPerPurchase, 0, false);\\n        require(\\n            order.buyToken.transfer(userAddress, boughtAmount),\\n            \\\"DCA: buyToken transfer failed\\\"\\n        );\\n    }\\n\\n    function withdraw(uint256 index) external {\\n        Order storage order = orders[msg.sender][index];\\n\\n        uint256 amountToWithdraw = order.total - order.spent;\\n        order.spent = order.total;\\n\\n        require(\\n            order.sellToken.transfer(msg.sender, amountToWithdraw),\\n            \\\"DCA: Not enough funds to withdraw\\\"\\n        );\\n    }\\n\\n    function getMentoExchange(IERC20 token) internal view returns (IExchange) {\\n        if (address(token) == cUSDAddress) {\\n            return cUSDExchange;\\n        }\\n        revert(\\\"DCA: Exchange not found\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x237c10846dc59388db2f1fd44f89d03d3fd349aad245c4a9212f6c2b747dcbf6\",\"license\":\"Unlicense\"},\"contracts/IExchange.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IExchange {\\n  // function buy(uint256, uint256, bool) external returns (uint256);\\n  function sell(uint256, uint256, bool) external returns (uint256);\\n  // function exchange(uint256, uint256, bool) external returns (uint256);\\n  // function setUpdateFrequency(uint256) external;\\n  // function getBuyTokenAmount(uint256, bool) external view returns (uint256);\\n  // function getSellTokenAmount(uint256, bool) external view returns (uint256);\\n  // function getBuyAndSellBuckets(bool) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x7064575b4c399703594c6974796057713f84fd4ec7ff1049c3b2665c8aba614e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60803461009957601f61119438819003918201601f19168301916001600160401b0383118484101761009e5780849260409485528339810103126100995780602061008a92519161004f836100b4565b01519061005b826100b4565b600080546001600160a01b03199081166001600160a01b03938416179091556001805490911691909216179055565b6040516110ce90816100c68239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116036100995756fe60806040526004361015610013575b600080fd5b6000803560e01c9081632e1a7d4d1461008e57508063518e62db1461008557806363c69f081461007c578063793b8c6d14610073578063dc3528d61461006a5763edb258411461006257600080fd5b61000e610a6f565b5061000e6106f0565b5061000e610608565b5061000e6104e7565b5061000e6101ed565b346101cc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc57338152600260205261018c8160206101736100dd600435604085206105bd565b5061012f61011660028301549260038101936100fa855482610f6e565b94555473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101929092529093849283919082906044820190565b03925af19081156101bf575b8391610191575b50610f85565b604051f35b6101b2915060203d81116101b8575b6101aa8183610b7e565b810190610c34565b83610186565b503d6101a0565b6101c7610c4c565b61017f565b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761041c60043561022c816101cf565b602435610238816101cf565b7f1ca7e15bb55042f2fce0be38a0ff228a9d717fcbac85d171c7b3903a9625394b60443591606435936104096084356103016040517f23b872dd000000000000000000000000000000000000000000000000000000008152602081806102ce8b30336004850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b0381600073ffffffffffffffffffffffffffffffffffffffff8a165af190811561043e575b600091610420575b50610c59565b610309610bbf565b73ffffffffffffffffffffffffffffffffffffffff841681529673ffffffffffffffffffffffffffffffffffffffff85166020890152866040890152600060608901528060808901528160a0890152600060c08901526103bd61038c3373ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b54986103b83373ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b610cbe565b60405194859433988a879290969594919360a09460c08501988552602085015273ffffffffffffffffffffffffffffffffffffffff809216604085015216606083015260808201520152565b0390a26040519081529081906020820190565b0390f35b610438915060203d81116101b8576101aa8183610b7e565b386102fb565b610446610c4c565b6102f3565b6020908160408183019282815285518094520193019160005b828110610472575050505090565b909192938260e0826104db600194895160c0809173ffffffffffffffffffffffffffffffffffffffff808251168552602082015116602085015260408101516040850152606081015160608501526080810151608085015260a081015160a08501520151910152565b01950193929101610464565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610539816101cf565b1660005260028152604060002090815467ffffffffffffffff81116105b0575b604051919261056e600583901b850184610b7e565b8183526000908152838120938084015b838310610593576040518061041c878261044b565b6007826001926105a289610bcc565b81520196019201919461057e565b6105b8610b25565b610559565b80548210156105d9576000526007602060002091020190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610644816101cf565b60243573ffffffffffffffffffffffffffffffffffffffff8092166000526002602052604060002090815481101561000e5761067f916105bd565b508054600182015460028301546003840154600485015460058601546006909601546040805173ffffffffffffffffffffffffffffffffffffffff978a1688168152989095169095166020880152928601919091526060850152608084015260a083019190915260c082015260e090f35b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561072c816101cf565b6024356107598273ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b90610763916105bd565b5060068101918254600583015461077991610e18565b43101561078590610e30565b60038201918254936004820193845495866107a08183610e18565b600286015410156107b090610e95565b6107b991610e18565b9055439055805473ffffffffffffffffffffffffffffffffffffffff169373ffffffffffffffffffffffffffffffffffffffff94856107f782611010565b6040517f095ea7b3000000000000000000000000000000000000000000000000000000008152911673ffffffffffffffffffffffffffffffffffffffff8116600483015260248201939093526020949093859384908187806044810103816000809e819a165af161018c99610953986108c2939280156109fb575b6109de575b50546040519687809481937f8ab1a5d4000000000000000000000000000000000000000000000000000000008352600483016040600091939293606081019481528260208201520152565b03925af19283156109d1575b8893610997575b50600101546108f99073ffffffffffffffffffffffffffffffffffffffff16610116565b90876040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af191821561098a575b849261096d575b5050610f09565b6109839250803d106101b8576101aa8183610b7e565b3880610966565b610992610c4c565b61095f565b6108f991935060016109c161011692873d89116109ca575b6109b98183610b7e565b810190610efa565b949250506108d5565b503d6109af565b6109d9610c4c565b6108ce565b6109f490853d87116101b8576101aa8183610b7e565b5038610877565b610a03610c4c565b610872565b610a6d9092919260e081019360c0809173ffffffffffffffffffffffffffffffffffffffff808251168552602082015116602085015260408101516040850152606081015160608501526080810151608085015260a081015160a08501520151910152565b565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761041c610b19610b1360c073ffffffffffffffffffffffffffffffffffffffff600435610acb816101cf565b604051610ad781610b55565b60009381858093528260208201528260408201528260608201528260808201528260a082015201521681526002602052604060243591206105bd565b50610bcc565b60405191829182610a08565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60e0810190811067ffffffffffffffff821117610b7157604052565b610b79610b25565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b7157604052565b60405190610a6d82610b55565b90604051610bd981610b55565b60c06006829473ffffffffffffffffffffffffffffffffffffffff8082541685526001820154166020850152600281015460408501526003810154606085015260048101546080850152600581015460a08501520154910152565b9081602091031261000e5751801515810361000e5790565b506040513d6000823e3d90fd5b15610c6057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4443413a204e6f7420656e6f7567682066756e647300000000000000000000006044820152fd5b8054610ce19168010000000000000000821015610ddb575b6001820181556105bd565b919091610dac57805182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff91821617835560069160c091610d7d90602083015116600186019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60408101516002850155606081015160038501556080810151600485015560a081015160058501550151910155565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b610de3610b25565b610cd6565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81198111610e24570190565b610e2c610de8565b0190565b15610e3757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4443413a204e6f7420656e6f7567682074696d6520706173736564207965742e6044820152fd5b15610e9c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4443413a204f726465722066756c6c79206578656375746564000000000000006044820152fd5b9081602091031261000e575190565b15610f1057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4443413a20627579546f6b656e207472616e73666572206661696c65640000006044820152fd5b818110610f79570390565b610f81610de8565b0390565b15610f8c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4443413a204e6f7420656e6f7567682066756e647320746f207769746864726160448201527f77000000000000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff908180600054169116146110915760646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4443413a2045786368616e6765206e6f7420666f756e640000000000000000006044820152fd5b600154169056fea2646970667358221220567720a4df00dc0d717674306486a6ce5d593dc9d6f74a20cf5641bb2310acdd64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c9081632e1a7d4d1461008e57508063518e62db1461008557806363c69f081461007c578063793b8c6d14610073578063dc3528d61461006a5763edb258411461006257600080fd5b61000e610a6f565b5061000e6106f0565b5061000e610608565b5061000e6104e7565b5061000e6101ed565b346101cc5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101cc57338152600260205261018c8160206101736100dd600435604085206105bd565b5061012f61011660028301549260038101936100fa855482610f6e565b94555473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1690565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815233600482015260248101929092529093849283919082906044820190565b03925af19081156101bf575b8391610191575b50610f85565b604051f35b6101b2915060203d81116101b8575b6101aa8183610b7e565b810190610c34565b83610186565b503d6101a0565b6101c7610c4c565b61017f565b80fd5b73ffffffffffffffffffffffffffffffffffffffff81160361000e57565b503461000e5760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761041c60043561022c816101cf565b602435610238816101cf565b7f1ca7e15bb55042f2fce0be38a0ff228a9d717fcbac85d171c7b3903a9625394b60443591606435936104096084356103016040517f23b872dd000000000000000000000000000000000000000000000000000000008152602081806102ce8b30336004850160409194939294606082019573ffffffffffffffffffffffffffffffffffffffff80921683521660208201520152565b0381600073ffffffffffffffffffffffffffffffffffffffff8a165af190811561043e575b600091610420575b50610c59565b610309610bbf565b73ffffffffffffffffffffffffffffffffffffffff841681529673ffffffffffffffffffffffffffffffffffffffff85166020890152866040890152600060608901528060808901528160a0890152600060c08901526103bd61038c3373ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b54986103b83373ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b610cbe565b60405194859433988a879290969594919360a09460c08501988552602085015273ffffffffffffffffffffffffffffffffffffffff809216604085015216606083015260808201520152565b0390a26040519081529081906020820190565b0390f35b610438915060203d81116101b8576101aa8183610b7e565b386102fb565b610446610c4c565b6102f3565b6020908160408183019282815285518094520193019160005b828110610472575050505090565b909192938260e0826104db600194895160c0809173ffffffffffffffffffffffffffffffffffffffff808251168552602082015116602085015260408101516040850152606081015160608501526080810151608085015260a081015160a08501520151910152565b01950193929101610464565b503461000e576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff600435610539816101cf565b1660005260028152604060002090815467ffffffffffffffff81116105b0575b604051919261056e600583901b850184610b7e565b8183526000908152838120938084015b838310610593576040518061041c878261044b565b6007826001926105a289610bcc565b81520196019201919461057e565b6105b8610b25565b610559565b80548210156105d9576000526007602060002091020190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57600435610644816101cf565b60243573ffffffffffffffffffffffffffffffffffffffff8092166000526002602052604060002090815481101561000e5761067f916105bd565b508054600182015460028301546003840154600485015460058601546006909601546040805173ffffffffffffffffffffffffffffffffffffffff978a1688168152989095169095166020880152928601919091526060850152608084015260a083019190915260c082015260e090f35b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043561072c816101cf565b6024356107598273ffffffffffffffffffffffffffffffffffffffff166000526002602052604060002090565b90610763916105bd565b5060068101918254600583015461077991610e18565b43101561078590610e30565b60038201918254936004820193845495866107a08183610e18565b600286015410156107b090610e95565b6107b991610e18565b9055439055805473ffffffffffffffffffffffffffffffffffffffff169373ffffffffffffffffffffffffffffffffffffffff94856107f782611010565b6040517f095ea7b3000000000000000000000000000000000000000000000000000000008152911673ffffffffffffffffffffffffffffffffffffffff8116600483015260248201939093526020949093859384908187806044810103816000809e819a165af161018c99610953986108c2939280156109fb575b6109de575b50546040519687809481937f8ab1a5d4000000000000000000000000000000000000000000000000000000008352600483016040600091939293606081019481528260208201520152565b03925af19283156109d1575b8893610997575b50600101546108f99073ffffffffffffffffffffffffffffffffffffffff16610116565b90876040518096819582947fa9059cbb000000000000000000000000000000000000000000000000000000008452600484016020909392919373ffffffffffffffffffffffffffffffffffffffff60408201951681520152565b03925af191821561098a575b849261096d575b5050610f09565b6109839250803d106101b8576101aa8183610b7e565b3880610966565b610992610c4c565b61095f565b6108f991935060016109c161011692873d89116109ca575b6109b98183610b7e565b810190610efa565b949250506108d5565b503d6109af565b6109d9610c4c565b6108ce565b6109f490853d87116101b8576101aa8183610b7e565b5038610877565b610a03610c4c565b610872565b610a6d9092919260e081019360c0809173ffffffffffffffffffffffffffffffffffffffff808251168552602082015116602085015260408101516040850152606081015160608501526080810151608085015260a081015160a08501520151910152565b565b503461000e5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5761041c610b19610b1360c073ffffffffffffffffffffffffffffffffffffffff600435610acb816101cf565b604051610ad781610b55565b60009381858093528260208201528260408201528260608201528260808201528260a082015201521681526002602052604060243591206105bd565b50610bcc565b60405191829182610a08565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60e0810190811067ffffffffffffffff821117610b7157604052565b610b79610b25565b604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b7157604052565b60405190610a6d82610b55565b90604051610bd981610b55565b60c06006829473ffffffffffffffffffffffffffffffffffffffff8082541685526001820154166020850152600281015460408501526003810154606085015260048101546080850152600581015460a08501520154910152565b9081602091031261000e5751801515810361000e5790565b506040513d6000823e3d90fd5b15610c6057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4443413a204e6f7420656e6f7567682066756e647300000000000000000000006044820152fd5b8054610ce19168010000000000000000821015610ddb575b6001820181556105bd565b919091610dac57805182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff91821617835560069160c091610d7d90602083015116600186019073ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60408101516002850155606081015160038501556080810151600485015560a081015160058501550151910155565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b610de3610b25565b610cd6565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81198111610e24570190565b610e2c610de8565b0190565b15610e3757565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4443413a204e6f7420656e6f7567682074696d6520706173736564207965742e6044820152fd5b15610e9c57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4443413a204f726465722066756c6c79206578656375746564000000000000006044820152fd5b9081602091031261000e575190565b15610f1057565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4443413a20627579546f6b656e207472616e73666572206661696c65640000006044820152fd5b818110610f79570390565b610f81610de8565b0390565b15610f8c57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4443413a204e6f7420656e6f7567682066756e647320746f207769746864726160448201527f77000000000000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff908180600054169116146110915760646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4443413a2045786368616e6765206e6f7420666f756e640000000000000000006044820152fd5b600154169056fea2646970667358221220567720a4df00dc0d717674306486a6ce5d593dc9d6f74a20cf5641bb2310acdd64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 716,
        "contract": "contracts/DCA.sol:DCA",
        "label": "cUSDAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 719,
        "contract": "contracts/DCA.sol:DCA",
        "label": "cUSDExchange",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IExchange)1057"
      },
      {
        "astId": 742,
        "contract": "contracts/DCA.sol:DCA",
        "label": "orders",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(Order)736_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Order)736_storage)dyn_storage": {
        "base": "t_struct(Order)736_storage",
        "encoding": "dynamic_array",
        "label": "struct DCA.Order[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IExchange)1057": {
        "encoding": "inplace",
        "label": "contract IExchange",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Order)736_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DCA.Order[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Order)736_storage)dyn_storage"
      },
      "t_struct(Order)736_storage": {
        "encoding": "inplace",
        "label": "struct DCA.Order",
        "members": [
          {
            "astId": 722,
            "contract": "contracts/DCA.sol:DCA",
            "label": "sellToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 725,
            "contract": "contracts/DCA.sol:DCA",
            "label": "buyToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)663"
          },
          {
            "astId": 727,
            "contract": "contracts/DCA.sol:DCA",
            "label": "total",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 729,
            "contract": "contracts/DCA.sol:DCA",
            "label": "spent",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 731,
            "contract": "contracts/DCA.sol:DCA",
            "label": "amountPerPurchase",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 733,
            "contract": "contracts/DCA.sol:DCA",
            "label": "blocksBetweenPurchases",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 735,
            "contract": "contracts/DCA.sol:DCA",
            "label": "lastBlock",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}